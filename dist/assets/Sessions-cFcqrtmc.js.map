{"version":3,"file":"Sessions-cFcqrtmc.js","sources":["../../src/pages/Sessions.tsx"],"sourcesContent":["import React, { FC, useState } from 'react'\nimport { useQuery } from '@tanstack/react-query'\nimport client from '../api/client'\nimport LoadingSpinner from '../components/LoadingSpinner'\n\ninterface Route {\n  color: string\n  grade: string\n}\n\ninterface Climb {\n  id: number\n  routeId: number\n  status: boolean\n  rating: number\n  tries: number\n  notes: string | null\n  points: number\n  createdAt: string\n  route: Route\n}\n\ninterface ClimbsByDate {\n  [date: string]: Climb[]\n}\n\ntype SortKey = 'color' | 'grade' | 'status' | 'tries' | 'rating' | 'points'\ntype SortDirection = 'asc' | 'desc'\n\nconst Sessions: FC = () => {\n  const [sortConfig, setSortConfig] = useState<{\n    key: SortKey\n    direction: SortDirection\n    date: string | null\n  }>({\n    key: 'color',\n    direction: 'asc',\n    date: null\n  })\n\n  const { data: climbs, isLoading } = useQuery<Climb[]>({\n    queryKey: ['climbs'],\n    queryFn: async () => {\n      const response = await client.get('/climbs')\n      return response.data\n    }\n  })\n\n  if (isLoading) {\n    return <LoadingSpinner />\n  }\n\n  const getColorHex = (color: string): string => {\n    const colorMap: Record<string, string> = {\n      'White': '#FFFFFF',\n      'Pink': '#FF69B4',\n      'Blue': '#0000FF',\n      'Black': '#000000',\n      'Orange': '#FFA500',\n      'Purple': '#800080',\n      'Green': '#008000',\n      'Red': '#FF0000',\n      'Yellow': '#FFFF00',\n      'Teal': '#008080'\n    }\n    return colorMap[color] || '#CCCCCC'\n  }\n\n  // Group climbs by date\n  const climbsByDate = climbs?.reduce((acc: ClimbsByDate, climb) => {\n    const date = new Date(climb.createdAt).toLocaleDateString()\n    if (!acc[date]) {\n      acc[date] = []\n    }\n    acc[date].push(climb)\n    return acc\n  }, {}) || {}\n\n  const sortClimbs = (climbs: Climb[]) => {\n    return [...climbs].sort((a, b) => {\n      let comparison = 0\n      switch (sortConfig.key) {\n        case 'color':\n          comparison = a.route.color.localeCompare(b.route.color)\n          break\n        case 'grade':\n          comparison = a.route.grade.localeCompare(b.route.grade)\n          break\n        case 'status':\n          comparison = Number(b.status) - Number(a.status)\n          break\n        case 'tries':\n          comparison = a.tries - b.tries\n          break\n        case 'rating':\n          comparison = a.rating - b.rating\n          break\n        case 'points':\n          comparison = a.points - b.points\n          break\n        default:\n          return 0\n      }\n      return sortConfig.direction === 'asc' ? comparison : -comparison\n    })\n  }\n\n  const handleSort = (key: SortKey, date: string) => {\n    setSortConfig(current => ({\n      key,\n      direction: \n        current.key === key && current.date === date && current.direction === 'asc' \n          ? 'desc' \n          : 'asc',\n      date\n    }))\n  }\n\n  const renderSortIcon = (key: SortKey, date: string) => {\n    if (sortConfig.key !== key || sortConfig.date !== date) return null\n    return (\n      <span className=\"ml-1\">\n        {sortConfig.direction === 'asc' ? '↑' : '↓'}\n      </span>\n    )\n  }\n\n  return (\n    <div className=\"container mx-auto px-4 py-8\">\n      <h1 className=\"text-2xl font-bold mb-6\">Your Climbing Sessions</h1>\n\n      {Object.entries(climbsByDate).map(([date, sessionClimbs]) => (\n        <div key={date} className=\"mb-8\">\n          <h2 className=\"text-xl font-semibold text-gray-800 mb-4\">{date}</h2>\n          <div className=\"overflow-x-auto\">\n            <table className=\"min-w-full bg-white border border-gray-200 rounded-lg\">\n              <thead>\n                <tr className=\"bg-gray-50\">\n                  <th \n                    className=\"px-4 py-2 cursor-pointer\" \n                    onClick={() => handleSort('color', date)}\n                  >\n                    Color {renderSortIcon('color', date)}\n                  </th>\n                  <th \n                    className=\"px-4 py-2 cursor-pointer\" \n                    onClick={() => handleSort('grade', date)}\n                  >\n                    Grade {renderSortIcon('grade', date)}\n                  </th>\n                  <th \n                    className=\"px-4 py-2 cursor-pointer\" \n                    onClick={() => handleSort('status', date)}\n                  >\n                    Status {renderSortIcon('status', date)}\n                  </th>\n                  <th \n                    className=\"px-4 py-2 cursor-pointer\" \n                    onClick={() => handleSort('tries', date)}\n                  >\n                    # Tries {renderSortIcon('tries', date)}\n                  </th>\n                  <th \n                    className=\"px-4 py-2 cursor-pointer\" \n                    onClick={() => handleSort('rating', date)}\n                  >\n                    Stars {renderSortIcon('rating', date)}\n                  </th>\n                  <th \n                    className=\"px-4 py-2 cursor-pointer\" \n                    onClick={() => handleSort('points', date)}\n                  >\n                    Points {renderSortIcon('points', date)}\n                  </th>\n                </tr>\n              </thead>\n              <tbody>\n                {sortClimbs(sessionClimbs).map((climb) => (\n                  <tr key={climb.id} className=\"border-t border-gray-100 hover:bg-gray-50\">\n                    <td className=\"px-4 py-2\">\n                      <div className=\"flex items-center\">\n                        <span \n                          className=\"w-4 h-4 rounded-full mr-2\" \n                          style={{ \n                            backgroundColor: getColorHex(climb.route.color),\n                            border: climb.route.color === 'White' ? '1px solid #ccc' : 'none'\n                          }}\n                        />\n                        {climb.route.color}\n                      </div>\n                    </td>\n                    <td className=\"px-4 py-2\">{climb.route.grade}</td>\n                    <td className=\"px-4 py-2\">\n                      <span className={`font-medium ${climb.status ? 'text-green-600' : 'text-red-600'}`}>\n                        {climb.status ? 'Send' : 'Attempt'}\n                      </span>\n                    </td>\n                    <td className=\"px-4 py-2\">{climb.tries}</td>\n                    <td className=\"px-4 py-2\">{climb.rating}/5</td>\n                    <td className=\"px-4 py-2\">\n                      <span className=\"text-purple-600 font-medium\">\n                        {climb.points} pts\n                      </span>\n                    </td>\n                  </tr>\n                ))}\n              </tbody>\n            </table>\n          </div>\n        </div>\n      ))}\n\n      {Object.keys(climbsByDate).length === 0 && (\n        <div className=\"text-center my-8\">\n          <h4 className=\"text-xl text-gray-600 mb-4\">Enter your first climb to see Sessions</h4>\n          <a \n            href=\"/sends\" \n            className=\"inline-block bg-purple-600 text-white px-6 py-2 rounded-lg hover:bg-purple-700 transition\"\n          >\n            Back to Sends\n          </a>\n        </div>\n      )}\n    </div>\n  )\n}\n\nexport default Sessions"],"names":["useState","climbs","jsx","jsxs"],"mappings":"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"}