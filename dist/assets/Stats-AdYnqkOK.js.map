{"version":3,"file":"Stats-AdYnqkOK.js","sources":["../../src/pages/Stats.tsx"],"sourcesContent":["import { FC, useState } from 'react'\nimport { useQuery } from '@tanstack/react-query'\nimport {\n  Chart as ChartJS,\n  CategoryScale,\n  LinearScale,\n  BarElement,\n  LineElement,\n  ArcElement,\n  Title,\n  Tooltip,\n  Legend,\n  PointElement,\n  Filler\n} from 'chart.js'\nimport { Bar, Doughnut, Line } from 'react-chartjs-2'\nimport client from '../api/client'\nimport LoadingSpinner from '../components/LoadingSpinner'\n\n// Register Chart.js components\nChartJS.register(\n  CategoryScale,\n  LinearScale,\n  BarElement,\n  LineElement,\n  ArcElement,\n  Title,\n  Tooltip,\n  Legend,\n  PointElement,\n  Filler\n)\n\ninterface Stats {\n  totalAscents: number\n  totalSends: number\n  totalPoints: number\n  avgGrade: string\n  avgSentGrade: string\n  avgPointsPerClimb: number\n  successRate: number\n  successRatePerSession: number\n  climbsPerSession: number\n  avgAttemptsPerClimb: number\n}\n\nconst Stats: FC = () => {\n  const [activeTab, setActiveTab] = useState<'metrics' | 'trends'>('metrics')\n\n  const { data: stats, isLoading: statsLoading } = useQuery<Stats>({\n    queryKey: ['user-stats'],\n    queryFn: async () => {\n      const response = await client.get('/user/me/stats')\n      return response.data\n    }\n  })\n\n  const { data: chartData, isLoading: chartsLoading } = useQuery({\n    queryKey: ['stats-charts'],\n    queryFn: async () => {\n      const response = await client.get('/api/stats')\n      return response.data\n    }\n  })\n\n  if (statsLoading || chartsLoading) {\n    return <LoadingSpinner />\n  }\n\n  return (\n    <div className=\"container stats-container\">\n      {/* Main Content Pills */}\n      <ul className=\"nav nav-pills stats-pills mb-4 sticky-top\" role=\"tablist\" \n          style={{ top: 0, zIndex: 1020, backgroundColor: '#212529' }}>\n        <li className=\"nav-item\" role=\"presentation\">\n          <button \n            className={`nav-link ${activeTab === 'metrics' ? 'active' : ''}`}\n            onClick={() => setActiveTab('metrics')}\n            type=\"button\"\n            role=\"tab\"\n          >\n            Metrics\n          </button>\n        </li>\n        <li className=\"nav-item\" role=\"presentation\">\n          <button \n            className={`nav-link ${activeTab === 'trends' ? 'active' : ''}`}\n            onClick={() => setActiveTab('trends')}\n            type=\"button\"\n            role=\"tab\"\n          >\n            Trends\n          </button>\n        </li>\n      </ul>\n\n      <div className=\"tab-content\">\n        {/* Metrics Tab */}\n        {activeTab === 'metrics' && (\n          <div className=\"row row-cols-1 row-cols-md-2 g-2 mb-4\">\n            <MetricCard\n              value={stats?.totalAscents}\n              label=\"Total Ascents\"\n            />\n            <MetricCard\n              value={stats?.totalSends}\n              label=\"Total Sends\"\n            />\n            <MetricCard\n              value={stats?.avgGrade}\n              label=\"Avg Grade\"\n            />\n            <MetricCard\n              value={stats?.avgSentGrade}\n              label=\"Avg. Sent Grade\"\n            />\n            <MetricCard\n              value={stats?.totalPoints}\n              label=\"Total Points\"\n            />\n            <MetricCard\n              value={stats?.avgPointsPerClimb}\n              label=\"Avg Pts / Ascent\"\n            />\n            <MetricCard\n              value={`${stats?.successRate}%`}\n              label=\"Send Rate\"\n            />\n            <MetricCard\n              value={`${stats?.successRatePerSession}%`}\n              label=\"Session Send Rate\"\n            />\n            <MetricCard\n              value={stats?.climbsPerSession}\n              label=\"Ascents / Session\"\n            />\n            <MetricCard\n              value={stats?.avgAttemptsPerClimb}\n              label=\"Tries / Ascent\"\n            />\n          </div>\n        )}\n\n        {/* Trends Tab */}\n        {activeTab === 'trends' && chartData && (\n          <div>\n            <ChartCard\n              title=\"Route Mix\"\n              chart={\n                <Doughnut\n                  data={{\n                    labels: chartData.ascentsByDifficulty.labels,\n                    datasets: [{\n                      data: chartData.ascentsByDifficulty.data,\n                      backgroundColor: chartData.ascentsByDifficulty.labels.map(getGradeColor)\n                    }]\n                  }}\n                  options={{\n                    responsive: true,\n                    maintainAspectRatio: false,\n                    plugins: {\n                      legend: {\n                        position: 'right'\n                      }\n                    }\n                  }}\n                />\n              }\n            />\n\n            <ChartCard\n              title=\"Sends\"\n              chart={\n                <Bar\n                  data={{\n                    labels: chartData.sendsByDate.labels.map(formatDate),\n                    datasets: [\n                      {\n                        label: 'Sends',\n                        data: chartData.sendsByDate.sends,\n                        backgroundColor: '#7442d6',\n                        stack: 'combined'\n                      },\n                      {\n                        label: 'Attempts',\n                        data: chartData.sendsByDate.attempts,\n                        backgroundColor: '#6c757d',\n                        stack: 'combined'\n                      }\n                    ]\n                  }}\n                  options={{\n                    responsive: true,\n                    maintainAspectRatio: false,\n                    scales: {\n                      y: {\n                        beginAtZero: true,\n                        stacked: true\n                      },\n                      x: {\n                        stacked: true\n                      }\n                    }\n                  }}\n                />\n              }\n            />\n\n            <ChartCard\n              title=\"Send Rate\"\n              chart={\n                <Line\n                  data={{\n                    labels: chartData.metricsOverTime.labels.map(formatDate),\n                    datasets: [{\n                      label: 'Send Rate',\n                      data: chartData.metricsOverTime.metrics[0].data,\n                      borderColor: '#7442d6',\n                      backgroundColor: 'rgba(116, 66, 214, 0.2)',\n                      fill: true,\n                      tension: 0.4\n                    }]\n                  }}\n                  options={{\n                    responsive: true,\n                    maintainAspectRatio: false,\n                    scales: {\n                      y: {\n                        beginAtZero: true,\n                        max: 100\n                      }\n                    }\n                  }}\n                />\n              }\n            />\n\n            <ChartCard\n              title=\"Routes per Session\"\n              chart={\n                <Line\n                  data={{\n                    labels: chartData.climbsPerSession.labels.map(formatDate),\n                    datasets: [{\n                      label: 'Routes',\n                      data: chartData.climbsPerSession.data,\n                      borderColor: '#7442d6',\n                      backgroundColor: 'rgba(116, 66, 214, 0.2)',\n                      fill: true,\n                      tension: 0.4\n                    }]\n                  }}\n                  options={{\n                    responsive: true,\n                    maintainAspectRatio: false,\n                    scales: {\n                      y: {\n                        beginAtZero: true\n                      }\n                    }\n                  }}\n                />\n              }\n            />\n\n            <ChartCard\n              title=\"Send Rate by Color\"\n              chart={\n                <Bar\n                  data={{\n                    labels: chartData.sendRateByColor.labels,\n                    datasets: [{\n                      data: chartData.sendRateByColor.data,\n                      backgroundColor: '#7442d6'\n                    }]\n                  }}\n                  options={{\n                    responsive: true,\n                    maintainAspectRatio: false,\n                    scales: {\n                      y: {\n                        beginAtZero: true,\n                        max: 100,\n                        ticks: {\n                          callback: (value) => `${value}%`\n                        }\n                      }\n                    },\n                    plugins: {\n                      legend: {\n                        display: false\n                      }\n                    }\n                  }}\n                />\n              }\n            />\n          </div>\n        )}\n      </div>\n    </div>\n  )\n}\n\n// Helper Components\ninterface MetricCardProps {\n  value: number | string | undefined\n  label: string\n}\n\nconst MetricCard: FC<MetricCardProps> = ({ value, label }) => (\n  <div className=\"col-6 mb-2\">\n    <div className=\"metric-card\" style={{ height: '100px' }}>\n      <div className=\"metric-value\">{value ?? 0}</div>\n      <div className=\"metric-label\">{label}</div>\n    </div>\n  </div>\n)\n\ninterface ChartCardProps {\n  title: string\n  chart: React.ReactNode\n}\n\nconst ChartCard: FC<ChartCardProps> = ({ title, chart }) => (\n  <div className=\"card mb-4\">\n    <div className=\"card-header bg-transparent\">\n      <h5 className=\"card-title mb-0\">{title}</h5>\n    </div>\n    <div className=\"card-body\">\n      <div style={{ height: '300px', width: '100%' }}>\n        {chart}\n      </div>\n    </div>\n  </div>\n)\n\n// Helper functions\nconst formatDate = (dateString: string) => {\n  const date = new Date(dateString)\n  return `${(date.getMonth() + 1).toString().padStart(2, '0')}/${date.getDate().toString().padStart(2, '0')}`\n}\n\nconst getGradeColor = (grade: string) => {\n  const gradeColors: Record<string, string> = {\n    '5.0': '#E9D8FD', '5.1': '#D6BCFA', '5.2': '#C084FC', '5.3': '#A855F7',\n    '5.4': '#9333EA', '5.5': '#7E22CE', '5.6': '#6B21A8', '5.7': '#581C87',\n    '5.8': '#4C1D95', '5.9': '#3B0764', '5.10a': '#350567', '5.10b': '#2F035E',\n    '5.10c': '#290356', '5.10d': '#23034E', '5.11a': '#1D0345', '5.11b': '#18033C',\n    '5.11c': '#130333', '5.11d': '#0E032B', '5.12a': '#090222', '5.12b': '#08021D',\n    '5.12c': '#07021A', '5.12d': '#060216', '5.13a': '#050213', '5.13b': '#040210',\n    '5.13c': '#03020D', '5.13d': '#02020A', '5.14a': '#010207', '5.14b': '#010106',\n    '5.14c': '#010105', '5.14d': '#010104', '5.15a': '#010103', '5.15b': '#010102',\n    '5.15c': '#010101', '5.15d': '#000000'\n  }\n  return gradeColors[grade] || '#7442d6'\n}\n\nexport default Stats"],"names":["ChartJS","register","CategoryScale","LinearScale","BarElement","LineElement","ArcElement","Title","Tooltip","Legend","PointElement","Filler","Stats","activeTab","setActiveTab","useState","data","stats","isLoading","statsLoading","useQuery","queryKey","queryFn","async","client","get","chartData","chartsLoading","LoadingSpinner","jsxs","className","children","jsxRuntimeExports","role","style","top","zIndex","backgroundColor","jsx","onClick","type","MetricCard","value","totalAscents","label","totalSends","avgGrade","avgSentGrade","totalPoints","avgPointsPerClimb","successRate","successRatePerSession","climbsPerSession","avgAttemptsPerClimb","ChartCard","title","chart","Doughnut","labels","ascentsByDifficulty","datasets","map","getGradeColor","options","responsive","maintainAspectRatio","plugins","legend","position","Bar","sendsByDate","formatDate","sends","stack","attempts","scales","y","beginAtZero","stacked","x","Line","metricsOverTime","metrics","borderColor","fill","tension","max","sendRateByColor","ticks","callback","display","height","width","dateString","date","Date","getMonth","toString","padStart","getDate","grade"],"mappings":"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"}