{"version":3,"file":"Stats-Cmv9LER5.js","sources":["../../src/pages/Stats.tsx"],"sourcesContent":["import { FC, useState } from 'react'\nimport { useQuery } from '@tanstack/react-query'\nimport {\n  Chart as ChartJS,\n  CategoryScale,\n  LinearScale,\n  BarElement,\n  LineElement,\n  ArcElement,\n  Title,\n  Tooltip,\n  Legend,\n  PointElement,\n  Filler\n} from 'chart.js'\nimport { Bar, Doughnut, Line } from 'react-chartjs-2'\nimport client from '../api/client'\nimport LoadingSpinner from '../components/LoadingSpinner'\n\n// Register Chart.js components\nChartJS.register(\n  CategoryScale,\n  LinearScale,\n  BarElement,\n  LineElement,\n  ArcElement,\n  Title,\n  Tooltip,\n  Legend,\n  PointElement,\n  Filler\n)\n\ninterface Stats {\n  totalAscents: number\n  totalSends: number\n  totalPoints: number\n  avgGrade: string\n  avgSentGrade: string\n  avgPointsPerClimb: number\n  successRate: number\n  successRatePerSession: number\n  climbsPerSession: number\n  avgAttemptsPerClimb: number\n}\n\nconst Stats: FC = () => {\n  const [activeTab, setActiveTab] = useState<'metrics' | 'trends'>('metrics')\n\n  const { data: stats, isLoading: statsLoading } = useQuery<Stats>({\n    queryKey: ['user-stats'],\n    queryFn: async () => {\n      const response = await client.get('/user/me/stats')\n      return response.data\n    }\n  })\n\n  const { data: chartData, isLoading: chartsLoading } = useQuery({\n    queryKey: ['stats-charts'],\n    queryFn: async () => {\n      const response = await client.get('/api/stats')\n      return response.data\n    }\n  })\n\n  if (statsLoading || chartsLoading) {\n    return <LoadingSpinner />\n  }\n\n  return (\n    <div className=\"container stats-container\">\n      {/* Main Content Pills */}\n      <ul className=\"nav nav-pills stats-pills mb-4 sticky-top\" role=\"tablist\" \n          style={{ top: 0, zIndex: 1020, backgroundColor: '#212529' }}>\n        <li className=\"nav-item\" role=\"presentation\">\n          <button \n            className={`nav-link ${activeTab === 'metrics' ? 'active' : ''}`}\n            onClick={() => setActiveTab('metrics')}\n            type=\"button\"\n            role=\"tab\"\n          >\n            Metrics\n          </button>\n        </li>\n        <li className=\"nav-item\" role=\"presentation\">\n          <button \n            className={`nav-link ${activeTab === 'trends' ? 'active' : ''}`}\n            onClick={() => setActiveTab('trends')}\n            type=\"button\"\n            role=\"tab\"\n          >\n            Trends\n          </button>\n        </li>\n      </ul>\n\n      <div className=\"tab-content\">\n        {/* Metrics Tab */}\n        {activeTab === 'metrics' && (\n          <div className=\"row row-cols-1 row-cols-md-2 g-2 mb-4\">\n            <MetricCard\n              value={stats?.totalAscents}\n              label=\"Total Ascents\"\n            />\n            <MetricCard\n              value={stats?.totalSends}\n              label=\"Total Sends\"\n            />\n            <MetricCard\n              value={stats?.avgGrade}\n              label=\"Avg Grade\"\n            />\n            <MetricCard\n              value={stats?.avgSentGrade}\n              label=\"Avg. Sent Grade\"\n            />\n            <MetricCard\n              value={stats?.totalPoints}\n              label=\"Total Points\"\n            />\n            <MetricCard\n              value={stats?.avgPointsPerClimb}\n              label=\"Avg Pts / Ascent\"\n            />\n            <MetricCard\n              value={`${stats?.successRate}%`}\n              label=\"Send Rate\"\n            />\n            <MetricCard\n              value={`${stats?.successRatePerSession}%`}\n              label=\"Session Send Rate\"\n            />\n            <MetricCard\n              value={stats?.climbsPerSession}\n              label=\"Ascents / Session\"\n            />\n            <MetricCard\n              value={stats?.avgAttemptsPerClimb}\n              label=\"Tries / Ascent\"\n            />\n          </div>\n        )}\n\n        {/* Trends Tab */}\n        {activeTab === 'trends' && chartData && (\n          <div>\n            <ChartCard\n              title=\"Route Mix\"\n              chart={\n                <Doughnut\n                  data={{\n                    labels: chartData.ascentsByDifficulty.labels,\n                    datasets: [{\n                      data: chartData.ascentsByDifficulty.data,\n                      backgroundColor: chartData.ascentsByDifficulty.labels.map(getGradeColor)\n                    }]\n                  }}\n                  options={{\n                    responsive: true,\n                    maintainAspectRatio: false,\n                    plugins: {\n                      legend: {\n                        position: 'right'\n                      }\n                    }\n                  }}\n                />\n              }\n            />\n\n            <ChartCard\n              title=\"Sends\"\n              chart={\n                <Bar\n                  data={{\n                    labels: chartData.sendsByDate.labels.map(formatDate),\n                    datasets: [\n                      {\n                        label: 'Sends',\n                        data: chartData.sendsByDate.sends,\n                        backgroundColor: '#7442d6',\n                        stack: 'combined'\n                      },\n                      {\n                        label: 'Attempts',\n                        data: chartData.sendsByDate.attempts,\n                        backgroundColor: '#6c757d',\n                        stack: 'combined'\n                      }\n                    ]\n                  }}\n                  options={{\n                    responsive: true,\n                    maintainAspectRatio: false,\n                    scales: {\n                      y: {\n                        beginAtZero: true,\n                        stacked: true\n                      },\n                      x: {\n                        stacked: true\n                      }\n                    }\n                  }}\n                />\n              }\n            />\n\n            <ChartCard\n              title=\"Send Rate\"\n              chart={\n                <Line\n                  data={{\n                    labels: chartData.metricsOverTime.labels.map(formatDate),\n                    datasets: [{\n                      label: 'Send Rate',\n                      data: chartData.metricsOverTime.metrics[0].data,\n                      borderColor: '#7442d6',\n                      backgroundColor: 'rgba(116, 66, 214, 0.2)',\n                      fill: true,\n                      tension: 0.4\n                    }]\n                  }}\n                  options={{\n                    responsive: true,\n                    maintainAspectRatio: false,\n                    scales: {\n                      y: {\n                        beginAtZero: true,\n                        max: 100\n                      }\n                    }\n                  }}\n                />\n              }\n            />\n\n            <ChartCard\n              title=\"Routes per Session\"\n              chart={\n                <Line\n                  data={{\n                    labels: chartData.climbsPerSession.labels.map(formatDate),\n                    datasets: [{\n                      label: 'Routes',\n                      data: chartData.climbsPerSession.data,\n                      borderColor: '#7442d6',\n                      backgroundColor: 'rgba(116, 66, 214, 0.2)',\n                      fill: true,\n                      tension: 0.4\n                    }]\n                  }}\n                  options={{\n                    responsive: true,\n                    maintainAspectRatio: false,\n                    scales: {\n                      y: {\n                        beginAtZero: true\n                      }\n                    }\n                  }}\n                />\n              }\n            />\n\n            <ChartCard\n              title=\"Send Rate by Color\"\n              chart={\n                <Bar\n                  data={{\n                    labels: chartData.sendRateByColor.labels,\n                    datasets: [{\n                      data: chartData.sendRateByColor.data,\n                      backgroundColor: '#7442d6'\n                    }]\n                  }}\n                  options={{\n                    responsive: true,\n                    maintainAspectRatio: false,\n                    scales: {\n                      y: {\n                        beginAtZero: true,\n                        max: 100,\n                        ticks: {\n                          callback: (value) => `${value}%`\n                        }\n                      }\n                    },\n                    plugins: {\n                      legend: {\n                        display: false\n                      }\n                    }\n                  }}\n                />\n              }\n            />\n          </div>\n        )}\n      </div>\n    </div>\n  )\n}\n\n// Helper Components\ninterface MetricCardProps {\n  value: number | string | undefined\n  label: string\n}\n\nconst MetricCard: FC<MetricCardProps> = ({ value, label }) => (\n  <div className=\"col-6 mb-2\">\n    <div className=\"metric-card\" style={{ height: '100px' }}>\n      <div className=\"metric-value\">{value ?? 0}</div>\n      <div className=\"metric-label\">{label}</div>\n    </div>\n  </div>\n)\n\ninterface ChartCardProps {\n  title: string\n  chart: React.ReactNode\n}\n\nconst ChartCard: FC<ChartCardProps> = ({ title, chart }) => (\n  <div className=\"card mb-4\">\n    <div className=\"card-header bg-transparent\">\n      <h5 className=\"card-title mb-0\">{title}</h5>\n    </div>\n    <div className=\"card-body\">\n      <div style={{ height: '300px', width: '100%' }}>\n        {chart}\n      </div>\n    </div>\n  </div>\n)\n\n// Helper functions\nconst formatDate = (dateString: string) => {\n  const date = new Date(dateString)\n  return `${(date.getMonth() + 1).toString().padStart(2, '0')}/${date.getDate().toString().padStart(2, '0')}`\n}\n\nconst getGradeColor = (grade: string) => {\n  const gradeColors: Record<string, string> = {\n    '5.0': '#E9D8FD', '5.1': '#D6BCFA', '5.2': '#C084FC', '5.3': '#A855F7',\n    '5.4': '#9333EA', '5.5': '#7E22CE', '5.6': '#6B21A8', '5.7': '#581C87',\n    '5.8': '#4C1D95', '5.9': '#3B0764', '5.10a': '#350567', '5.10b': '#2F035E',\n    '5.10c': '#290356', '5.10d': '#23034E', '5.11a': '#1D0345', '5.11b': '#18033C',\n    '5.11c': '#130333', '5.11d': '#0E032B', '5.12a': '#090222', '5.12b': '#08021D',\n    '5.12c': '#07021A', '5.12d': '#060216', '5.13a': '#050213', '5.13b': '#040210',\n    '5.13c': '#03020D', '5.13d': '#02020A', '5.14a': '#010207', '5.14b': '#010106',\n    '5.14c': '#010105', '5.14d': '#010104', '5.15a': '#010103', '5.15b': '#010102',\n    '5.15c': '#010101', '5.15d': '#000000'\n  }\n  return gradeColors[grade] || '#7442d6'\n}\n\nexport default Stats"],"names":["ChartJS","CategoryScale","LinearScale","BarElement","LineElement","ArcElement","Title","Tooltip","Legend","PointElement","Filler","Stats","activeTab","setActiveTab","useState","stats","statsLoading","useQuery","client","chartData","chartsLoading","LoadingSpinner","jsxs","jsx","MetricCard","ChartCard","Doughnut","getGradeColor","Bar","formatDate","Line","value","label","title","chart","dateString","date","grade"],"mappings":"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"}