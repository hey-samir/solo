{"version":3,"file":"Stats-g7VTRNWM.js","sources":["../../src/pages/Stats.tsx"],"sourcesContent":["import { FC, useState } from 'react'\nimport { useQuery } from '@tanstack/react-query'\nimport {\n  Chart as ChartJS,\n  CategoryScale,\n  LinearScale,\n  BarElement,\n  LineElement,\n  ArcElement,\n  Title,\n  Tooltip,\n  Legend,\n  PointElement,\n  Filler\n} from 'chart.js'\nimport { Bar, Doughnut, Line } from 'react-chartjs-2'\nimport client from '../api/client'\nimport LoadingSpinner from '../components/LoadingSpinner'\n\n// Register Chart.js components\nChartJS.register(\n  CategoryScale,\n  LinearScale,\n  BarElement,\n  LineElement,\n  ArcElement,\n  Title,\n  Tooltip,\n  Legend,\n  PointElement,\n  Filler\n)\n\ninterface Stats {\n  totalAscents: number\n  totalSends: number\n  totalPoints: number\n  avgGrade: string\n  avgSentGrade: string\n  avgPointsPerClimb: number\n  successRate: number\n  successRatePerSession: number\n  climbsPerSession: number\n  avgAttemptsPerClimb: number\n}\n\nconst Stats: FC = () => {\n  const [activeTab, setActiveTab] = useState<'metrics' | 'trends'>('metrics')\n\n  const { data: stats, isLoading: statsLoading } = useQuery<Stats>({\n    queryKey: ['user-stats'],\n    queryFn: async () => {\n      const response = await client.get('/user/me/stats')\n      return response.data\n    }\n  })\n\n  const { data: chartData, isLoading: chartsLoading } = useQuery({\n    queryKey: ['stats-charts'],\n    queryFn: async () => {\n      const response = await client.get('/api/stats')\n      return response.data\n    }\n  })\n\n  if (statsLoading || chartsLoading) {\n    return <LoadingSpinner />\n  }\n\n  return (\n    <div className=\"container stats-container\">\n      {/* Main Content Pills */}\n      <ul className=\"nav nav-pills stats-pills mb-4 sticky-top\" role=\"tablist\" \n          style={{ top: 0, zIndex: 1020, backgroundColor: '#212529' }}>\n        <li className=\"nav-item\" role=\"presentation\">\n          <button \n            className={`nav-link ${activeTab === 'metrics' ? 'active' : ''}`}\n            onClick={() => setActiveTab('metrics')}\n            type=\"button\"\n            role=\"tab\"\n          >\n            Metrics\n          </button>\n        </li>\n        <li className=\"nav-item\" role=\"presentation\">\n          <button \n            className={`nav-link ${activeTab === 'trends' ? 'active' : ''}`}\n            onClick={() => setActiveTab('trends')}\n            type=\"button\"\n            role=\"tab\"\n          >\n            Trends\n          </button>\n        </li>\n      </ul>\n\n      <div className=\"tab-content\">\n        {/* Metrics Tab */}\n        {activeTab === 'metrics' && (\n          <div className=\"row row-cols-1 row-cols-md-2 g-2 mb-4\">\n            <MetricCard\n              value={stats?.totalAscents}\n              label=\"Total Ascents\"\n            />\n            <MetricCard\n              value={stats?.totalSends}\n              label=\"Total Sends\"\n            />\n            <MetricCard\n              value={stats?.avgGrade}\n              label=\"Avg Grade\"\n            />\n            <MetricCard\n              value={stats?.avgSentGrade}\n              label=\"Avg. Sent Grade\"\n            />\n            <MetricCard\n              value={stats?.totalPoints}\n              label=\"Total Points\"\n            />\n            <MetricCard\n              value={stats?.avgPointsPerClimb}\n              label=\"Avg Pts / Ascent\"\n            />\n            <MetricCard\n              value={`${stats?.successRate}%`}\n              label=\"Send Rate\"\n            />\n            <MetricCard\n              value={`${stats?.successRatePerSession}%`}\n              label=\"Session Send Rate\"\n            />\n            <MetricCard\n              value={stats?.climbsPerSession}\n              label=\"Ascents / Session\"\n            />\n            <MetricCard\n              value={stats?.avgAttemptsPerClimb}\n              label=\"Tries / Ascent\"\n            />\n          </div>\n        )}\n\n        {/* Trends Tab */}\n        {activeTab === 'trends' && chartData && (\n          <div>\n            <ChartCard\n              title=\"Route Mix\"\n              chart={\n                <Doughnut\n                  data={{\n                    labels: chartData.ascentsByDifficulty.labels,\n                    datasets: [{\n                      data: chartData.ascentsByDifficulty.data,\n                      backgroundColor: chartData.ascentsByDifficulty.labels.map(getGradeColor)\n                    }]\n                  }}\n                  options={{\n                    responsive: true,\n                    maintainAspectRatio: false,\n                    plugins: {\n                      legend: {\n                        position: 'right'\n                      }\n                    }\n                  }}\n                />\n              }\n            />\n\n            <ChartCard\n              title=\"Sends\"\n              chart={\n                <Bar\n                  data={{\n                    labels: chartData.sendsByDate.labels.map(formatDate),\n                    datasets: [\n                      {\n                        label: 'Sends',\n                        data: chartData.sendsByDate.sends,\n                        backgroundColor: '#7442d6',\n                        stack: 'combined'\n                      },\n                      {\n                        label: 'Attempts',\n                        data: chartData.sendsByDate.attempts,\n                        backgroundColor: '#6c757d',\n                        stack: 'combined'\n                      }\n                    ]\n                  }}\n                  options={{\n                    responsive: true,\n                    maintainAspectRatio: false,\n                    scales: {\n                      y: {\n                        beginAtZero: true,\n                        stacked: true\n                      },\n                      x: {\n                        stacked: true\n                      }\n                    }\n                  }}\n                />\n              }\n            />\n\n            <ChartCard\n              title=\"Send Rate\"\n              chart={\n                <Line\n                  data={{\n                    labels: chartData.metricsOverTime.labels.map(formatDate),\n                    datasets: [{\n                      label: 'Send Rate',\n                      data: chartData.metricsOverTime.metrics[0].data,\n                      borderColor: '#7442d6',\n                      backgroundColor: 'rgba(116, 66, 214, 0.2)',\n                      fill: true,\n                      tension: 0.4\n                    }]\n                  }}\n                  options={{\n                    responsive: true,\n                    maintainAspectRatio: false,\n                    scales: {\n                      y: {\n                        beginAtZero: true,\n                        max: 100\n                      }\n                    }\n                  }}\n                />\n              }\n            />\n\n            <ChartCard\n              title=\"Routes per Session\"\n              chart={\n                <Line\n                  data={{\n                    labels: chartData.climbsPerSession.labels.map(formatDate),\n                    datasets: [{\n                      label: 'Routes',\n                      data: chartData.climbsPerSession.data,\n                      borderColor: '#7442d6',\n                      backgroundColor: 'rgba(116, 66, 214, 0.2)',\n                      fill: true,\n                      tension: 0.4\n                    }]\n                  }}\n                  options={{\n                    responsive: true,\n                    maintainAspectRatio: false,\n                    scales: {\n                      y: {\n                        beginAtZero: true\n                      }\n                    }\n                  }}\n                />\n              }\n            />\n\n            <ChartCard\n              title=\"Send Rate by Color\"\n              chart={\n                <Bar\n                  data={{\n                    labels: chartData.sendRateByColor.labels,\n                    datasets: [{\n                      data: chartData.sendRateByColor.data,\n                      backgroundColor: '#7442d6'\n                    }]\n                  }}\n                  options={{\n                    responsive: true,\n                    maintainAspectRatio: false,\n                    scales: {\n                      y: {\n                        beginAtZero: true,\n                        max: 100,\n                        ticks: {\n                          callback: (value) => `${value}%`\n                        }\n                      }\n                    },\n                    plugins: {\n                      legend: {\n                        display: false\n                      }\n                    }\n                  }}\n                />\n              }\n            />\n          </div>\n        )}\n      </div>\n    </div>\n  )\n}\n\n// Helper Components\ninterface MetricCardProps {\n  value: number | string | undefined\n  label: string\n}\n\nconst MetricCard: FC<MetricCardProps> = ({ value, label }) => (\n  <div className=\"col-6 mb-2\">\n    <div className=\"metric-card\" style={{ height: '100px' }}>\n      <div className=\"metric-value\">{value ?? 0}</div>\n      <div className=\"metric-label\">{label}</div>\n    </div>\n  </div>\n)\n\ninterface ChartCardProps {\n  title: string\n  chart: React.ReactNode\n}\n\nconst ChartCard: FC<ChartCardProps> = ({ title, chart }) => (\n  <div className=\"card mb-4\">\n    <div className=\"card-header bg-transparent\">\n      <h5 className=\"card-title mb-0\">{title}</h5>\n    </div>\n    <div className=\"card-body\">\n      <div style={{ height: '300px', width: '100%' }}>\n        {chart}\n      </div>\n    </div>\n  </div>\n)\n\n// Helper functions\nconst formatDate = (dateString: string) => {\n  const date = new Date(dateString)\n  return `${(date.getMonth() + 1).toString().padStart(2, '0')}/${date.getDate().toString().padStart(2, '0')}`\n}\n\nconst getGradeColor = (grade: string) => {\n  const gradeColors: Record<string, string> = {\n    '5.0': '#E9D8FD', '5.1': '#D6BCFA', '5.2': '#C084FC', '5.3': '#A855F7',\n    '5.4': '#9333EA', '5.5': '#7E22CE', '5.6': '#6B21A8', '5.7': '#581C87',\n    '5.8': '#4C1D95', '5.9': '#3B0764', '5.10a': '#350567', '5.10b': '#2F035E',\n    '5.10c': '#290356', '5.10d': '#23034E', '5.11a': '#1D0345', '5.11b': '#18033C',\n    '5.11c': '#130333', '5.11d': '#0E032B', '5.12a': '#090222', '5.12b': '#08021D',\n    '5.12c': '#07021A', '5.12d': '#060216', '5.13a': '#050213', '5.13b': '#040210',\n    '5.13c': '#03020D', '5.13d': '#02020A', '5.14a': '#010207', '5.14b': '#010106',\n    '5.14c': '#010105', '5.14d': '#010104', '5.15a': '#010103', '5.15b': '#010102',\n    '5.15c': '#010101', '5.15d': '#000000'\n  }\n  return gradeColors[grade] || '#7442d6'\n}\n\nexport default Stats"],"names":["ChartJS","Title","Tooltip","Legend","Filler","useState","jsxs","jsx"],"mappings":"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"}