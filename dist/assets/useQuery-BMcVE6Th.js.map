{"version":3,"file":"useQuery-BMcVE6Th.js","sources":["../../node_modules/@tanstack/query-core/build/modern/subscribable.js","../../node_modules/@tanstack/query-core/build/modern/utils.js","../../node_modules/@tanstack/query-core/build/modern/focusManager.js","../../node_modules/@tanstack/query-core/build/modern/onlineManager.js","../../node_modules/@tanstack/query-core/build/modern/thenable.js","../../node_modules/@tanstack/query-core/build/modern/retryer.js","../../node_modules/@tanstack/query-core/build/modern/notifyManager.js","../../node_modules/@tanstack/query-core/build/modern/query.js","../../node_modules/@tanstack/query-core/build/modern/queryObserver.js","../../node_modules/@tanstack/react-query/build/modern/QueryClientProvider.js","../../node_modules/@tanstack/react-query/build/modern/isRestoring.js","../../node_modules/@tanstack/react-query/build/modern/QueryErrorResetBoundary.js","../../node_modules/@tanstack/react-query/build/modern/utils.js","../../node_modules/@tanstack/react-query/build/modern/errorBoundaryUtils.js","../../node_modules/@tanstack/react-query/build/modern/suspense.js","../../node_modules/@tanstack/react-query/build/modern/useBaseQuery.js","../../node_modules/@tanstack/react-query/build/modern/useQuery.js"],"sourcesContent":["// src/subscribable.ts\nvar Subscribable = class {\n  constructor() {\n    this.listeners = /* @__PURE__ */ new Set();\n    this.subscribe = this.subscribe.bind(this);\n  }\n  subscribe(listener) {\n    this.listeners.add(listener);\n    this.onSubscribe();\n    return () => {\n      this.listeners.delete(listener);\n      this.onUnsubscribe();\n    };\n  }\n  hasListeners() {\n    return this.listeners.size > 0;\n  }\n  onSubscribe() {\n  }\n  onUnsubscribe() {\n  }\n};\nexport {\n  Subscribable\n};\n//# sourceMappingURL=subscribable.js.map","// src/utils.ts\nvar isServer = typeof window === \"undefined\" || \"Deno\" in globalThis;\nfunction noop() {\n}\nfunction functionalUpdate(updater, input) {\n  return typeof updater === \"function\" ? updater(input) : updater;\n}\nfunction isValidTimeout(value) {\n  return typeof value === \"number\" && value >= 0 && value !== Infinity;\n}\nfunction timeUntilStale(updatedAt, staleTime) {\n  return Math.max(updatedAt + (staleTime || 0) - Date.now(), 0);\n}\nfunction resolveStaleTime(staleTime, query) {\n  return typeof staleTime === \"function\" ? staleTime(query) : staleTime;\n}\nfunction resolveEnabled(enabled, query) {\n  return typeof enabled === \"function\" ? enabled(query) : enabled;\n}\nfunction matchQuery(filters, query) {\n  const {\n    type = \"all\",\n    exact,\n    fetchStatus,\n    predicate,\n    queryKey,\n    stale\n  } = filters;\n  if (queryKey) {\n    if (exact) {\n      if (query.queryHash !== hashQueryKeyByOptions(queryKey, query.options)) {\n        return false;\n      }\n    } else if (!partialMatchKey(query.queryKey, queryKey)) {\n      return false;\n    }\n  }\n  if (type !== \"all\") {\n    const isActive = query.isActive();\n    if (type === \"active\" && !isActive) {\n      return false;\n    }\n    if (type === \"inactive\" && isActive) {\n      return false;\n    }\n  }\n  if (typeof stale === \"boolean\" && query.isStale() !== stale) {\n    return false;\n  }\n  if (fetchStatus && fetchStatus !== query.state.fetchStatus) {\n    return false;\n  }\n  if (predicate && !predicate(query)) {\n    return false;\n  }\n  return true;\n}\nfunction matchMutation(filters, mutation) {\n  const { exact, status, predicate, mutationKey } = filters;\n  if (mutationKey) {\n    if (!mutation.options.mutationKey) {\n      return false;\n    }\n    if (exact) {\n      if (hashKey(mutation.options.mutationKey) !== hashKey(mutationKey)) {\n        return false;\n      }\n    } else if (!partialMatchKey(mutation.options.mutationKey, mutationKey)) {\n      return false;\n    }\n  }\n  if (status && mutation.state.status !== status) {\n    return false;\n  }\n  if (predicate && !predicate(mutation)) {\n    return false;\n  }\n  return true;\n}\nfunction hashQueryKeyByOptions(queryKey, options) {\n  const hashFn = options?.queryKeyHashFn || hashKey;\n  return hashFn(queryKey);\n}\nfunction hashKey(queryKey) {\n  return JSON.stringify(\n    queryKey,\n    (_, val) => isPlainObject(val) ? Object.keys(val).sort().reduce((result, key) => {\n      result[key] = val[key];\n      return result;\n    }, {}) : val\n  );\n}\nfunction partialMatchKey(a, b) {\n  if (a === b) {\n    return true;\n  }\n  if (typeof a !== typeof b) {\n    return false;\n  }\n  if (a && b && typeof a === \"object\" && typeof b === \"object\") {\n    return !Object.keys(b).some((key) => !partialMatchKey(a[key], b[key]));\n  }\n  return false;\n}\nfunction replaceEqualDeep(a, b) {\n  if (a === b) {\n    return a;\n  }\n  const array = isPlainArray(a) && isPlainArray(b);\n  if (array || isPlainObject(a) && isPlainObject(b)) {\n    const aItems = array ? a : Object.keys(a);\n    const aSize = aItems.length;\n    const bItems = array ? b : Object.keys(b);\n    const bSize = bItems.length;\n    const copy = array ? [] : {};\n    let equalItems = 0;\n    for (let i = 0; i < bSize; i++) {\n      const key = array ? i : bItems[i];\n      if ((!array && aItems.includes(key) || array) && a[key] === void 0 && b[key] === void 0) {\n        copy[key] = void 0;\n        equalItems++;\n      } else {\n        copy[key] = replaceEqualDeep(a[key], b[key]);\n        if (copy[key] === a[key] && a[key] !== void 0) {\n          equalItems++;\n        }\n      }\n    }\n    return aSize === bSize && equalItems === aSize ? a : copy;\n  }\n  return b;\n}\nfunction shallowEqualObjects(a, b) {\n  if (!b || Object.keys(a).length !== Object.keys(b).length) {\n    return false;\n  }\n  for (const key in a) {\n    if (a[key] !== b[key]) {\n      return false;\n    }\n  }\n  return true;\n}\nfunction isPlainArray(value) {\n  return Array.isArray(value) && value.length === Object.keys(value).length;\n}\nfunction isPlainObject(o) {\n  if (!hasObjectPrototype(o)) {\n    return false;\n  }\n  const ctor = o.constructor;\n  if (ctor === void 0) {\n    return true;\n  }\n  const prot = ctor.prototype;\n  if (!hasObjectPrototype(prot)) {\n    return false;\n  }\n  if (!prot.hasOwnProperty(\"isPrototypeOf\")) {\n    return false;\n  }\n  if (Object.getPrototypeOf(o) !== Object.prototype) {\n    return false;\n  }\n  return true;\n}\nfunction hasObjectPrototype(o) {\n  return Object.prototype.toString.call(o) === \"[object Object]\";\n}\nfunction sleep(timeout) {\n  return new Promise((resolve) => {\n    setTimeout(resolve, timeout);\n  });\n}\nfunction replaceData(prevData, data, options) {\n  if (typeof options.structuralSharing === \"function\") {\n    return options.structuralSharing(prevData, data);\n  } else if (options.structuralSharing !== false) {\n    if (process.env.NODE_ENV !== \"production\") {\n      try {\n        return replaceEqualDeep(prevData, data);\n      } catch (error) {\n        console.error(\n          `Structural sharing requires data to be JSON serializable. To fix this, turn off structuralSharing or return JSON-serializable data from your queryFn. [${options.queryHash}]: ${error}`\n        );\n      }\n    }\n    return replaceEqualDeep(prevData, data);\n  }\n  return data;\n}\nfunction keepPreviousData(previousData) {\n  return previousData;\n}\nfunction addToEnd(items, item, max = 0) {\n  const newItems = [...items, item];\n  return max && newItems.length > max ? newItems.slice(1) : newItems;\n}\nfunction addToStart(items, item, max = 0) {\n  const newItems = [item, ...items];\n  return max && newItems.length > max ? newItems.slice(0, -1) : newItems;\n}\nvar skipToken = Symbol();\nfunction ensureQueryFn(options, fetchOptions) {\n  if (process.env.NODE_ENV !== \"production\") {\n    if (options.queryFn === skipToken) {\n      console.error(\n        `Attempted to invoke queryFn when set to skipToken. This is likely a configuration error. Query hash: '${options.queryHash}'`\n      );\n    }\n  }\n  if (!options.queryFn && fetchOptions?.initialPromise) {\n    return () => fetchOptions.initialPromise;\n  }\n  if (!options.queryFn || options.queryFn === skipToken) {\n    return () => Promise.reject(new Error(`Missing queryFn: '${options.queryHash}'`));\n  }\n  return options.queryFn;\n}\nexport {\n  addToEnd,\n  addToStart,\n  ensureQueryFn,\n  functionalUpdate,\n  hashKey,\n  hashQueryKeyByOptions,\n  isPlainArray,\n  isPlainObject,\n  isServer,\n  isValidTimeout,\n  keepPreviousData,\n  matchMutation,\n  matchQuery,\n  noop,\n  partialMatchKey,\n  replaceData,\n  replaceEqualDeep,\n  resolveEnabled,\n  resolveStaleTime,\n  shallowEqualObjects,\n  skipToken,\n  sleep,\n  timeUntilStale\n};\n//# sourceMappingURL=utils.js.map","// src/focusManager.ts\nimport { Subscribable } from \"./subscribable.js\";\nimport { isServer } from \"./utils.js\";\nvar FocusManager = class extends Subscribable {\n  #focused;\n  #cleanup;\n  #setup;\n  constructor() {\n    super();\n    this.#setup = (onFocus) => {\n      if (!isServer && window.addEventListener) {\n        const listener = () => onFocus();\n        window.addEventListener(\"visibilitychange\", listener, false);\n        return () => {\n          window.removeEventListener(\"visibilitychange\", listener);\n        };\n      }\n      return;\n    };\n  }\n  onSubscribe() {\n    if (!this.#cleanup) {\n      this.setEventListener(this.#setup);\n    }\n  }\n  onUnsubscribe() {\n    if (!this.hasListeners()) {\n      this.#cleanup?.();\n      this.#cleanup = void 0;\n    }\n  }\n  setEventListener(setup) {\n    this.#setup = setup;\n    this.#cleanup?.();\n    this.#cleanup = setup((focused) => {\n      if (typeof focused === \"boolean\") {\n        this.setFocused(focused);\n      } else {\n        this.onFocus();\n      }\n    });\n  }\n  setFocused(focused) {\n    const changed = this.#focused !== focused;\n    if (changed) {\n      this.#focused = focused;\n      this.onFocus();\n    }\n  }\n  onFocus() {\n    const isFocused = this.isFocused();\n    this.listeners.forEach((listener) => {\n      listener(isFocused);\n    });\n  }\n  isFocused() {\n    if (typeof this.#focused === \"boolean\") {\n      return this.#focused;\n    }\n    return globalThis.document?.visibilityState !== \"hidden\";\n  }\n};\nvar focusManager = new FocusManager();\nexport {\n  FocusManager,\n  focusManager\n};\n//# sourceMappingURL=focusManager.js.map","// src/onlineManager.ts\nimport { Subscribable } from \"./subscribable.js\";\nimport { isServer } from \"./utils.js\";\nvar OnlineManager = class extends Subscribable {\n  #online = true;\n  #cleanup;\n  #setup;\n  constructor() {\n    super();\n    this.#setup = (onOnline) => {\n      if (!isServer && window.addEventListener) {\n        const onlineListener = () => onOnline(true);\n        const offlineListener = () => onOnline(false);\n        window.addEventListener(\"online\", onlineListener, false);\n        window.addEventListener(\"offline\", offlineListener, false);\n        return () => {\n          window.removeEventListener(\"online\", onlineListener);\n          window.removeEventListener(\"offline\", offlineListener);\n        };\n      }\n      return;\n    };\n  }\n  onSubscribe() {\n    if (!this.#cleanup) {\n      this.setEventListener(this.#setup);\n    }\n  }\n  onUnsubscribe() {\n    if (!this.hasListeners()) {\n      this.#cleanup?.();\n      this.#cleanup = void 0;\n    }\n  }\n  setEventListener(setup) {\n    this.#setup = setup;\n    this.#cleanup?.();\n    this.#cleanup = setup(this.setOnline.bind(this));\n  }\n  setOnline(online) {\n    const changed = this.#online !== online;\n    if (changed) {\n      this.#online = online;\n      this.listeners.forEach((listener) => {\n        listener(online);\n      });\n    }\n  }\n  isOnline() {\n    return this.#online;\n  }\n};\nvar onlineManager = new OnlineManager();\nexport {\n  OnlineManager,\n  onlineManager\n};\n//# sourceMappingURL=onlineManager.js.map","// src/thenable.ts\nfunction pendingThenable() {\n  let resolve;\n  let reject;\n  const thenable = new Promise((_resolve, _reject) => {\n    resolve = _resolve;\n    reject = _reject;\n  });\n  thenable.status = \"pending\";\n  thenable.catch(() => {\n  });\n  function finalize(data) {\n    Object.assign(thenable, data);\n    delete thenable.resolve;\n    delete thenable.reject;\n  }\n  thenable.resolve = (value) => {\n    finalize({\n      status: \"fulfilled\",\n      value\n    });\n    resolve(value);\n  };\n  thenable.reject = (reason) => {\n    finalize({\n      status: \"rejected\",\n      reason\n    });\n    reject(reason);\n  };\n  return thenable;\n}\nexport {\n  pendingThenable\n};\n//# sourceMappingURL=thenable.js.map","// src/retryer.ts\nimport { focusManager } from \"./focusManager.js\";\nimport { onlineManager } from \"./onlineManager.js\";\nimport { pendingThenable } from \"./thenable.js\";\nimport { isServer, sleep } from \"./utils.js\";\nfunction defaultRetryDelay(failureCount) {\n  return Math.min(1e3 * 2 ** failureCount, 3e4);\n}\nfunction canFetch(networkMode) {\n  return (networkMode ?? \"online\") === \"online\" ? onlineManager.isOnline() : true;\n}\nvar CancelledError = class extends Error {\n  constructor(options) {\n    super(\"CancelledError\");\n    this.revert = options?.revert;\n    this.silent = options?.silent;\n  }\n};\nfunction isCancelledError(value) {\n  return value instanceof CancelledError;\n}\nfunction createRetryer(config) {\n  let isRetryCancelled = false;\n  let failureCount = 0;\n  let isResolved = false;\n  let continueFn;\n  const thenable = pendingThenable();\n  const cancel = (cancelOptions) => {\n    if (!isResolved) {\n      reject(new CancelledError(cancelOptions));\n      config.abort?.();\n    }\n  };\n  const cancelRetry = () => {\n    isRetryCancelled = true;\n  };\n  const continueRetry = () => {\n    isRetryCancelled = false;\n  };\n  const canContinue = () => focusManager.isFocused() && (config.networkMode === \"always\" || onlineManager.isOnline()) && config.canRun();\n  const canStart = () => canFetch(config.networkMode) && config.canRun();\n  const resolve = (value) => {\n    if (!isResolved) {\n      isResolved = true;\n      config.onSuccess?.(value);\n      continueFn?.();\n      thenable.resolve(value);\n    }\n  };\n  const reject = (value) => {\n    if (!isResolved) {\n      isResolved = true;\n      config.onError?.(value);\n      continueFn?.();\n      thenable.reject(value);\n    }\n  };\n  const pause = () => {\n    return new Promise((continueResolve) => {\n      continueFn = (value) => {\n        if (isResolved || canContinue()) {\n          continueResolve(value);\n        }\n      };\n      config.onPause?.();\n    }).then(() => {\n      continueFn = void 0;\n      if (!isResolved) {\n        config.onContinue?.();\n      }\n    });\n  };\n  const run = () => {\n    if (isResolved) {\n      return;\n    }\n    let promiseOrValue;\n    const initialPromise = failureCount === 0 ? config.initialPromise : void 0;\n    try {\n      promiseOrValue = initialPromise ?? config.fn();\n    } catch (error) {\n      promiseOrValue = Promise.reject(error);\n    }\n    Promise.resolve(promiseOrValue).then(resolve).catch((error) => {\n      if (isResolved) {\n        return;\n      }\n      const retry = config.retry ?? (isServer ? 0 : 3);\n      const retryDelay = config.retryDelay ?? defaultRetryDelay;\n      const delay = typeof retryDelay === \"function\" ? retryDelay(failureCount, error) : retryDelay;\n      const shouldRetry = retry === true || typeof retry === \"number\" && failureCount < retry || typeof retry === \"function\" && retry(failureCount, error);\n      if (isRetryCancelled || !shouldRetry) {\n        reject(error);\n        return;\n      }\n      failureCount++;\n      config.onFail?.(failureCount, error);\n      sleep(delay).then(() => {\n        return canContinue() ? void 0 : pause();\n      }).then(() => {\n        if (isRetryCancelled) {\n          reject(error);\n        } else {\n          run();\n        }\n      });\n    });\n  };\n  return {\n    promise: thenable,\n    cancel,\n    continue: () => {\n      continueFn?.();\n      return thenable;\n    },\n    cancelRetry,\n    continueRetry,\n    canStart,\n    start: () => {\n      if (canStart()) {\n        run();\n      } else {\n        pause().then(run);\n      }\n      return thenable;\n    }\n  };\n}\nexport {\n  CancelledError,\n  canFetch,\n  createRetryer,\n  isCancelledError\n};\n//# sourceMappingURL=retryer.js.map","// src/notifyManager.ts\nfunction createNotifyManager() {\n  let queue = [];\n  let transactions = 0;\n  let notifyFn = (callback) => {\n    callback();\n  };\n  let batchNotifyFn = (callback) => {\n    callback();\n  };\n  let scheduleFn = (cb) => setTimeout(cb, 0);\n  const schedule = (callback) => {\n    if (transactions) {\n      queue.push(callback);\n    } else {\n      scheduleFn(() => {\n        notifyFn(callback);\n      });\n    }\n  };\n  const flush = () => {\n    const originalQueue = queue;\n    queue = [];\n    if (originalQueue.length) {\n      scheduleFn(() => {\n        batchNotifyFn(() => {\n          originalQueue.forEach((callback) => {\n            notifyFn(callback);\n          });\n        });\n      });\n    }\n  };\n  return {\n    batch: (callback) => {\n      let result;\n      transactions++;\n      try {\n        result = callback();\n      } finally {\n        transactions--;\n        if (!transactions) {\n          flush();\n        }\n      }\n      return result;\n    },\n    /**\n     * All calls to the wrapped function will be batched.\n     */\n    batchCalls: (callback) => {\n      return (...args) => {\n        schedule(() => {\n          callback(...args);\n        });\n      };\n    },\n    schedule,\n    /**\n     * Use this method to set a custom notify function.\n     * This can be used to for example wrap notifications with `React.act` while running tests.\n     */\n    setNotifyFunction: (fn) => {\n      notifyFn = fn;\n    },\n    /**\n     * Use this method to set a custom function to batch notifications together into a single tick.\n     * By default React Query will use the batch function provided by ReactDOM or React Native.\n     */\n    setBatchNotifyFunction: (fn) => {\n      batchNotifyFn = fn;\n    },\n    setScheduler: (fn) => {\n      scheduleFn = fn;\n    }\n  };\n}\nvar notifyManager = createNotifyManager();\nexport {\n  createNotifyManager,\n  notifyManager\n};\n//# sourceMappingURL=notifyManager.js.map","// src/query.ts\nimport {\n  ensureQueryFn,\n  noop,\n  replaceData,\n  resolveEnabled,\n  skipToken,\n  timeUntilStale\n} from \"./utils.js\";\nimport { notifyManager } from \"./notifyManager.js\";\nimport { canFetch, createRetryer, isCancelledError } from \"./retryer.js\";\nimport { Removable } from \"./removable.js\";\nvar Query = class extends Removable {\n  #initialState;\n  #revertState;\n  #cache;\n  #retryer;\n  #defaultOptions;\n  #abortSignalConsumed;\n  constructor(config) {\n    super();\n    this.#abortSignalConsumed = false;\n    this.#defaultOptions = config.defaultOptions;\n    this.setOptions(config.options);\n    this.observers = [];\n    this.#cache = config.cache;\n    this.queryKey = config.queryKey;\n    this.queryHash = config.queryHash;\n    this.#initialState = getDefaultState(this.options);\n    this.state = config.state ?? this.#initialState;\n    this.scheduleGc();\n  }\n  get meta() {\n    return this.options.meta;\n  }\n  get promise() {\n    return this.#retryer?.promise;\n  }\n  setOptions(options) {\n    this.options = { ...this.#defaultOptions, ...options };\n    this.updateGcTime(this.options.gcTime);\n  }\n  optionalRemove() {\n    if (!this.observers.length && this.state.fetchStatus === \"idle\") {\n      this.#cache.remove(this);\n    }\n  }\n  setData(newData, options) {\n    const data = replaceData(this.state.data, newData, this.options);\n    this.#dispatch({\n      data,\n      type: \"success\",\n      dataUpdatedAt: options?.updatedAt,\n      manual: options?.manual\n    });\n    return data;\n  }\n  setState(state, setStateOptions) {\n    this.#dispatch({ type: \"setState\", state, setStateOptions });\n  }\n  cancel(options) {\n    const promise = this.#retryer?.promise;\n    this.#retryer?.cancel(options);\n    return promise ? promise.then(noop).catch(noop) : Promise.resolve();\n  }\n  destroy() {\n    super.destroy();\n    this.cancel({ silent: true });\n  }\n  reset() {\n    this.destroy();\n    this.setState(this.#initialState);\n  }\n  isActive() {\n    return this.observers.some(\n      (observer) => resolveEnabled(observer.options.enabled, this) !== false\n    );\n  }\n  isDisabled() {\n    if (this.getObserversCount() > 0) {\n      return !this.isActive();\n    }\n    return this.options.queryFn === skipToken || this.state.dataUpdateCount + this.state.errorUpdateCount === 0;\n  }\n  isStale() {\n    if (this.state.isInvalidated) {\n      return true;\n    }\n    if (this.getObserversCount() > 0) {\n      return this.observers.some(\n        (observer) => observer.getCurrentResult().isStale\n      );\n    }\n    return this.state.data === void 0;\n  }\n  isStaleByTime(staleTime = 0) {\n    return this.state.isInvalidated || this.state.data === void 0 || !timeUntilStale(this.state.dataUpdatedAt, staleTime);\n  }\n  onFocus() {\n    const observer = this.observers.find((x) => x.shouldFetchOnWindowFocus());\n    observer?.refetch({ cancelRefetch: false });\n    this.#retryer?.continue();\n  }\n  onOnline() {\n    const observer = this.observers.find((x) => x.shouldFetchOnReconnect());\n    observer?.refetch({ cancelRefetch: false });\n    this.#retryer?.continue();\n  }\n  addObserver(observer) {\n    if (!this.observers.includes(observer)) {\n      this.observers.push(observer);\n      this.clearGcTimeout();\n      this.#cache.notify({ type: \"observerAdded\", query: this, observer });\n    }\n  }\n  removeObserver(observer) {\n    if (this.observers.includes(observer)) {\n      this.observers = this.observers.filter((x) => x !== observer);\n      if (!this.observers.length) {\n        if (this.#retryer) {\n          if (this.#abortSignalConsumed) {\n            this.#retryer.cancel({ revert: true });\n          } else {\n            this.#retryer.cancelRetry();\n          }\n        }\n        this.scheduleGc();\n      }\n      this.#cache.notify({ type: \"observerRemoved\", query: this, observer });\n    }\n  }\n  getObserversCount() {\n    return this.observers.length;\n  }\n  invalidate() {\n    if (!this.state.isInvalidated) {\n      this.#dispatch({ type: \"invalidate\" });\n    }\n  }\n  fetch(options, fetchOptions) {\n    if (this.state.fetchStatus !== \"idle\") {\n      if (this.state.data !== void 0 && fetchOptions?.cancelRefetch) {\n        this.cancel({ silent: true });\n      } else if (this.#retryer) {\n        this.#retryer.continueRetry();\n        return this.#retryer.promise;\n      }\n    }\n    if (options) {\n      this.setOptions(options);\n    }\n    if (!this.options.queryFn) {\n      const observer = this.observers.find((x) => x.options.queryFn);\n      if (observer) {\n        this.setOptions(observer.options);\n      }\n    }\n    if (process.env.NODE_ENV !== \"production\") {\n      if (!Array.isArray(this.options.queryKey)) {\n        console.error(\n          `As of v4, queryKey needs to be an Array. If you are using a string like 'repoData', please change it to an Array, e.g. ['repoData']`\n        );\n      }\n    }\n    const abortController = new AbortController();\n    const addSignalProperty = (object) => {\n      Object.defineProperty(object, \"signal\", {\n        enumerable: true,\n        get: () => {\n          this.#abortSignalConsumed = true;\n          return abortController.signal;\n        }\n      });\n    };\n    const fetchFn = () => {\n      const queryFn = ensureQueryFn(this.options, fetchOptions);\n      const queryFnContext = {\n        queryKey: this.queryKey,\n        meta: this.meta\n      };\n      addSignalProperty(queryFnContext);\n      this.#abortSignalConsumed = false;\n      if (this.options.persister) {\n        return this.options.persister(\n          queryFn,\n          queryFnContext,\n          this\n        );\n      }\n      return queryFn(queryFnContext);\n    };\n    const context = {\n      fetchOptions,\n      options: this.options,\n      queryKey: this.queryKey,\n      state: this.state,\n      fetchFn\n    };\n    addSignalProperty(context);\n    this.options.behavior?.onFetch(\n      context,\n      this\n    );\n    this.#revertState = this.state;\n    if (this.state.fetchStatus === \"idle\" || this.state.fetchMeta !== context.fetchOptions?.meta) {\n      this.#dispatch({ type: \"fetch\", meta: context.fetchOptions?.meta });\n    }\n    const onError = (error) => {\n      if (!(isCancelledError(error) && error.silent)) {\n        this.#dispatch({\n          type: \"error\",\n          error\n        });\n      }\n      if (!isCancelledError(error)) {\n        this.#cache.config.onError?.(\n          error,\n          this\n        );\n        this.#cache.config.onSettled?.(\n          this.state.data,\n          error,\n          this\n        );\n      }\n      this.scheduleGc();\n    };\n    this.#retryer = createRetryer({\n      initialPromise: fetchOptions?.initialPromise,\n      fn: context.fetchFn,\n      abort: abortController.abort.bind(abortController),\n      onSuccess: (data) => {\n        if (data === void 0) {\n          if (process.env.NODE_ENV !== \"production\") {\n            console.error(\n              `Query data cannot be undefined. Please make sure to return a value other than undefined from your query function. Affected query key: ${this.queryHash}`\n            );\n          }\n          onError(new Error(`${this.queryHash} data is undefined`));\n          return;\n        }\n        try {\n          this.setData(data);\n        } catch (error) {\n          onError(error);\n          return;\n        }\n        this.#cache.config.onSuccess?.(data, this);\n        this.#cache.config.onSettled?.(\n          data,\n          this.state.error,\n          this\n        );\n        this.scheduleGc();\n      },\n      onError,\n      onFail: (failureCount, error) => {\n        this.#dispatch({ type: \"failed\", failureCount, error });\n      },\n      onPause: () => {\n        this.#dispatch({ type: \"pause\" });\n      },\n      onContinue: () => {\n        this.#dispatch({ type: \"continue\" });\n      },\n      retry: context.options.retry,\n      retryDelay: context.options.retryDelay,\n      networkMode: context.options.networkMode,\n      canRun: () => true\n    });\n    return this.#retryer.start();\n  }\n  #dispatch(action) {\n    const reducer = (state) => {\n      switch (action.type) {\n        case \"failed\":\n          return {\n            ...state,\n            fetchFailureCount: action.failureCount,\n            fetchFailureReason: action.error\n          };\n        case \"pause\":\n          return {\n            ...state,\n            fetchStatus: \"paused\"\n          };\n        case \"continue\":\n          return {\n            ...state,\n            fetchStatus: \"fetching\"\n          };\n        case \"fetch\":\n          return {\n            ...state,\n            ...fetchState(state.data, this.options),\n            fetchMeta: action.meta ?? null\n          };\n        case \"success\":\n          return {\n            ...state,\n            data: action.data,\n            dataUpdateCount: state.dataUpdateCount + 1,\n            dataUpdatedAt: action.dataUpdatedAt ?? Date.now(),\n            error: null,\n            isInvalidated: false,\n            status: \"success\",\n            ...!action.manual && {\n              fetchStatus: \"idle\",\n              fetchFailureCount: 0,\n              fetchFailureReason: null\n            }\n          };\n        case \"error\":\n          const error = action.error;\n          if (isCancelledError(error) && error.revert && this.#revertState) {\n            return { ...this.#revertState, fetchStatus: \"idle\" };\n          }\n          return {\n            ...state,\n            error,\n            errorUpdateCount: state.errorUpdateCount + 1,\n            errorUpdatedAt: Date.now(),\n            fetchFailureCount: state.fetchFailureCount + 1,\n            fetchFailureReason: error,\n            fetchStatus: \"idle\",\n            status: \"error\"\n          };\n        case \"invalidate\":\n          return {\n            ...state,\n            isInvalidated: true\n          };\n        case \"setState\":\n          return {\n            ...state,\n            ...action.state\n          };\n      }\n    };\n    this.state = reducer(this.state);\n    notifyManager.batch(() => {\n      this.observers.forEach((observer) => {\n        observer.onQueryUpdate();\n      });\n      this.#cache.notify({ query: this, type: \"updated\", action });\n    });\n  }\n};\nfunction fetchState(data, options) {\n  return {\n    fetchFailureCount: 0,\n    fetchFailureReason: null,\n    fetchStatus: canFetch(options.networkMode) ? \"fetching\" : \"paused\",\n    ...data === void 0 && {\n      error: null,\n      status: \"pending\"\n    }\n  };\n}\nfunction getDefaultState(options) {\n  const data = typeof options.initialData === \"function\" ? options.initialData() : options.initialData;\n  const hasData = data !== void 0;\n  const initialDataUpdatedAt = hasData ? typeof options.initialDataUpdatedAt === \"function\" ? options.initialDataUpdatedAt() : options.initialDataUpdatedAt : 0;\n  return {\n    data,\n    dataUpdateCount: 0,\n    dataUpdatedAt: hasData ? initialDataUpdatedAt ?? Date.now() : 0,\n    error: null,\n    errorUpdateCount: 0,\n    errorUpdatedAt: 0,\n    fetchFailureCount: 0,\n    fetchFailureReason: null,\n    fetchMeta: null,\n    isInvalidated: false,\n    status: hasData ? \"success\" : \"pending\",\n    fetchStatus: \"idle\"\n  };\n}\nexport {\n  Query,\n  fetchState\n};\n//# sourceMappingURL=query.js.map","// src/queryObserver.ts\nimport { focusManager } from \"./focusManager.js\";\nimport { notifyManager } from \"./notifyManager.js\";\nimport { fetchState } from \"./query.js\";\nimport { Subscribable } from \"./subscribable.js\";\nimport { pendingThenable } from \"./thenable.js\";\nimport {\n  isServer,\n  isValidTimeout,\n  noop,\n  replaceData,\n  resolveEnabled,\n  resolveStaleTime,\n  shallowEqualObjects,\n  timeUntilStale\n} from \"./utils.js\";\nvar QueryObserver = class extends Subscribable {\n  constructor(client, options) {\n    super();\n    this.options = options;\n    this.#client = client;\n    this.#selectError = null;\n    this.#currentThenable = pendingThenable();\n    if (!this.options.experimental_prefetchInRender) {\n      this.#currentThenable.reject(\n        new Error(\"experimental_prefetchInRender feature flag is not enabled\")\n      );\n    }\n    this.bindMethods();\n    this.setOptions(options);\n  }\n  #client;\n  #currentQuery = void 0;\n  #currentQueryInitialState = void 0;\n  #currentResult = void 0;\n  #currentResultState;\n  #currentResultOptions;\n  #currentThenable;\n  #selectError;\n  #selectFn;\n  #selectResult;\n  // This property keeps track of the last query with defined data.\n  // It will be used to pass the previous data and query to the placeholder function between renders.\n  #lastQueryWithDefinedData;\n  #staleTimeoutId;\n  #refetchIntervalId;\n  #currentRefetchInterval;\n  #trackedProps = /* @__PURE__ */ new Set();\n  bindMethods() {\n    this.refetch = this.refetch.bind(this);\n  }\n  onSubscribe() {\n    if (this.listeners.size === 1) {\n      this.#currentQuery.addObserver(this);\n      if (shouldFetchOnMount(this.#currentQuery, this.options)) {\n        this.#executeFetch();\n      } else {\n        this.updateResult();\n      }\n      this.#updateTimers();\n    }\n  }\n  onUnsubscribe() {\n    if (!this.hasListeners()) {\n      this.destroy();\n    }\n  }\n  shouldFetchOnReconnect() {\n    return shouldFetchOn(\n      this.#currentQuery,\n      this.options,\n      this.options.refetchOnReconnect\n    );\n  }\n  shouldFetchOnWindowFocus() {\n    return shouldFetchOn(\n      this.#currentQuery,\n      this.options,\n      this.options.refetchOnWindowFocus\n    );\n  }\n  destroy() {\n    this.listeners = /* @__PURE__ */ new Set();\n    this.#clearStaleTimeout();\n    this.#clearRefetchInterval();\n    this.#currentQuery.removeObserver(this);\n  }\n  setOptions(options, notifyOptions) {\n    const prevOptions = this.options;\n    const prevQuery = this.#currentQuery;\n    this.options = this.#client.defaultQueryOptions(options);\n    if (this.options.enabled !== void 0 && typeof this.options.enabled !== \"boolean\" && typeof this.options.enabled !== \"function\" && typeof resolveEnabled(this.options.enabled, this.#currentQuery) !== \"boolean\") {\n      throw new Error(\n        \"Expected enabled to be a boolean or a callback that returns a boolean\"\n      );\n    }\n    this.#updateQuery();\n    this.#currentQuery.setOptions(this.options);\n    if (prevOptions._defaulted && !shallowEqualObjects(this.options, prevOptions)) {\n      this.#client.getQueryCache().notify({\n        type: \"observerOptionsUpdated\",\n        query: this.#currentQuery,\n        observer: this\n      });\n    }\n    const mounted = this.hasListeners();\n    if (mounted && shouldFetchOptionally(\n      this.#currentQuery,\n      prevQuery,\n      this.options,\n      prevOptions\n    )) {\n      this.#executeFetch();\n    }\n    this.updateResult(notifyOptions);\n    if (mounted && (this.#currentQuery !== prevQuery || resolveEnabled(this.options.enabled, this.#currentQuery) !== resolveEnabled(prevOptions.enabled, this.#currentQuery) || resolveStaleTime(this.options.staleTime, this.#currentQuery) !== resolveStaleTime(prevOptions.staleTime, this.#currentQuery))) {\n      this.#updateStaleTimeout();\n    }\n    const nextRefetchInterval = this.#computeRefetchInterval();\n    if (mounted && (this.#currentQuery !== prevQuery || resolveEnabled(this.options.enabled, this.#currentQuery) !== resolveEnabled(prevOptions.enabled, this.#currentQuery) || nextRefetchInterval !== this.#currentRefetchInterval)) {\n      this.#updateRefetchInterval(nextRefetchInterval);\n    }\n  }\n  getOptimisticResult(options) {\n    const query = this.#client.getQueryCache().build(this.#client, options);\n    const result = this.createResult(query, options);\n    if (shouldAssignObserverCurrentProperties(this, result)) {\n      this.#currentResult = result;\n      this.#currentResultOptions = this.options;\n      this.#currentResultState = this.#currentQuery.state;\n    }\n    return result;\n  }\n  getCurrentResult() {\n    return this.#currentResult;\n  }\n  trackResult(result, onPropTracked) {\n    const trackedResult = {};\n    Object.keys(result).forEach((key) => {\n      Object.defineProperty(trackedResult, key, {\n        configurable: false,\n        enumerable: true,\n        get: () => {\n          this.trackProp(key);\n          onPropTracked?.(key);\n          return result[key];\n        }\n      });\n    });\n    return trackedResult;\n  }\n  trackProp(key) {\n    this.#trackedProps.add(key);\n  }\n  getCurrentQuery() {\n    return this.#currentQuery;\n  }\n  refetch({ ...options } = {}) {\n    return this.fetch({\n      ...options\n    });\n  }\n  fetchOptimistic(options) {\n    const defaultedOptions = this.#client.defaultQueryOptions(options);\n    const query = this.#client.getQueryCache().build(this.#client, defaultedOptions);\n    return query.fetch().then(() => this.createResult(query, defaultedOptions));\n  }\n  fetch(fetchOptions) {\n    return this.#executeFetch({\n      ...fetchOptions,\n      cancelRefetch: fetchOptions.cancelRefetch ?? true\n    }).then(() => {\n      this.updateResult();\n      return this.#currentResult;\n    });\n  }\n  #executeFetch(fetchOptions) {\n    this.#updateQuery();\n    let promise = this.#currentQuery.fetch(\n      this.options,\n      fetchOptions\n    );\n    if (!fetchOptions?.throwOnError) {\n      promise = promise.catch(noop);\n    }\n    return promise;\n  }\n  #updateStaleTimeout() {\n    this.#clearStaleTimeout();\n    const staleTime = resolveStaleTime(\n      this.options.staleTime,\n      this.#currentQuery\n    );\n    if (isServer || this.#currentResult.isStale || !isValidTimeout(staleTime)) {\n      return;\n    }\n    const time = timeUntilStale(this.#currentResult.dataUpdatedAt, staleTime);\n    const timeout = time + 1;\n    this.#staleTimeoutId = setTimeout(() => {\n      if (!this.#currentResult.isStale) {\n        this.updateResult();\n      }\n    }, timeout);\n  }\n  #computeRefetchInterval() {\n    return (typeof this.options.refetchInterval === \"function\" ? this.options.refetchInterval(this.#currentQuery) : this.options.refetchInterval) ?? false;\n  }\n  #updateRefetchInterval(nextInterval) {\n    this.#clearRefetchInterval();\n    this.#currentRefetchInterval = nextInterval;\n    if (isServer || resolveEnabled(this.options.enabled, this.#currentQuery) === false || !isValidTimeout(this.#currentRefetchInterval) || this.#currentRefetchInterval === 0) {\n      return;\n    }\n    this.#refetchIntervalId = setInterval(() => {\n      if (this.options.refetchIntervalInBackground || focusManager.isFocused()) {\n        this.#executeFetch();\n      }\n    }, this.#currentRefetchInterval);\n  }\n  #updateTimers() {\n    this.#updateStaleTimeout();\n    this.#updateRefetchInterval(this.#computeRefetchInterval());\n  }\n  #clearStaleTimeout() {\n    if (this.#staleTimeoutId) {\n      clearTimeout(this.#staleTimeoutId);\n      this.#staleTimeoutId = void 0;\n    }\n  }\n  #clearRefetchInterval() {\n    if (this.#refetchIntervalId) {\n      clearInterval(this.#refetchIntervalId);\n      this.#refetchIntervalId = void 0;\n    }\n  }\n  createResult(query, options) {\n    const prevQuery = this.#currentQuery;\n    const prevOptions = this.options;\n    const prevResult = this.#currentResult;\n    const prevResultState = this.#currentResultState;\n    const prevResultOptions = this.#currentResultOptions;\n    const queryChange = query !== prevQuery;\n    const queryInitialState = queryChange ? query.state : this.#currentQueryInitialState;\n    const { state } = query;\n    let newState = { ...state };\n    let isPlaceholderData = false;\n    let data;\n    if (options._optimisticResults) {\n      const mounted = this.hasListeners();\n      const fetchOnMount = !mounted && shouldFetchOnMount(query, options);\n      const fetchOptionally = mounted && shouldFetchOptionally(query, prevQuery, options, prevOptions);\n      if (fetchOnMount || fetchOptionally) {\n        newState = {\n          ...newState,\n          ...fetchState(state.data, query.options)\n        };\n      }\n      if (options._optimisticResults === \"isRestoring\") {\n        newState.fetchStatus = \"idle\";\n      }\n    }\n    let { error, errorUpdatedAt, status } = newState;\n    if (options.select && newState.data !== void 0) {\n      if (prevResult && newState.data === prevResultState?.data && options.select === this.#selectFn) {\n        data = this.#selectResult;\n      } else {\n        try {\n          this.#selectFn = options.select;\n          data = options.select(newState.data);\n          data = replaceData(prevResult?.data, data, options);\n          this.#selectResult = data;\n          this.#selectError = null;\n        } catch (selectError) {\n          this.#selectError = selectError;\n        }\n      }\n    } else {\n      data = newState.data;\n    }\n    if (options.placeholderData !== void 0 && data === void 0 && status === \"pending\") {\n      let placeholderData;\n      if (prevResult?.isPlaceholderData && options.placeholderData === prevResultOptions?.placeholderData) {\n        placeholderData = prevResult.data;\n      } else {\n        placeholderData = typeof options.placeholderData === \"function\" ? options.placeholderData(\n          this.#lastQueryWithDefinedData?.state.data,\n          this.#lastQueryWithDefinedData\n        ) : options.placeholderData;\n        if (options.select && placeholderData !== void 0) {\n          try {\n            placeholderData = options.select(placeholderData);\n            this.#selectError = null;\n          } catch (selectError) {\n            this.#selectError = selectError;\n          }\n        }\n      }\n      if (placeholderData !== void 0) {\n        status = \"success\";\n        data = replaceData(\n          prevResult?.data,\n          placeholderData,\n          options\n        );\n        isPlaceholderData = true;\n      }\n    }\n    if (this.#selectError) {\n      error = this.#selectError;\n      data = this.#selectResult;\n      errorUpdatedAt = Date.now();\n      status = \"error\";\n    }\n    const isFetching = newState.fetchStatus === \"fetching\";\n    const isPending = status === \"pending\";\n    const isError = status === \"error\";\n    const isLoading = isPending && isFetching;\n    const hasData = data !== void 0;\n    const result = {\n      status,\n      fetchStatus: newState.fetchStatus,\n      isPending,\n      isSuccess: status === \"success\",\n      isError,\n      isInitialLoading: isLoading,\n      isLoading,\n      data,\n      dataUpdatedAt: newState.dataUpdatedAt,\n      error,\n      errorUpdatedAt,\n      failureCount: newState.fetchFailureCount,\n      failureReason: newState.fetchFailureReason,\n      errorUpdateCount: newState.errorUpdateCount,\n      isFetched: newState.dataUpdateCount > 0 || newState.errorUpdateCount > 0,\n      isFetchedAfterMount: newState.dataUpdateCount > queryInitialState.dataUpdateCount || newState.errorUpdateCount > queryInitialState.errorUpdateCount,\n      isFetching,\n      isRefetching: isFetching && !isPending,\n      isLoadingError: isError && !hasData,\n      isPaused: newState.fetchStatus === \"paused\",\n      isPlaceholderData,\n      isRefetchError: isError && hasData,\n      isStale: isStale(query, options),\n      refetch: this.refetch,\n      promise: this.#currentThenable\n    };\n    const nextResult = result;\n    if (this.options.experimental_prefetchInRender) {\n      const finalizeThenableIfPossible = (thenable) => {\n        if (nextResult.status === \"error\") {\n          thenable.reject(nextResult.error);\n        } else if (nextResult.data !== void 0) {\n          thenable.resolve(nextResult.data);\n        }\n      };\n      const recreateThenable = () => {\n        const pending = this.#currentThenable = nextResult.promise = pendingThenable();\n        finalizeThenableIfPossible(pending);\n      };\n      const prevThenable = this.#currentThenable;\n      switch (prevThenable.status) {\n        case \"pending\":\n          if (query.queryHash === prevQuery.queryHash) {\n            finalizeThenableIfPossible(prevThenable);\n          }\n          break;\n        case \"fulfilled\":\n          if (nextResult.status === \"error\" || nextResult.data !== prevThenable.value) {\n            recreateThenable();\n          }\n          break;\n        case \"rejected\":\n          if (nextResult.status !== \"error\" || nextResult.error !== prevThenable.reason) {\n            recreateThenable();\n          }\n          break;\n      }\n    }\n    return nextResult;\n  }\n  updateResult(notifyOptions) {\n    const prevResult = this.#currentResult;\n    const nextResult = this.createResult(this.#currentQuery, this.options);\n    this.#currentResultState = this.#currentQuery.state;\n    this.#currentResultOptions = this.options;\n    if (this.#currentResultState.data !== void 0) {\n      this.#lastQueryWithDefinedData = this.#currentQuery;\n    }\n    if (shallowEqualObjects(nextResult, prevResult)) {\n      return;\n    }\n    this.#currentResult = nextResult;\n    const defaultNotifyOptions = {};\n    const shouldNotifyListeners = () => {\n      if (!prevResult) {\n        return true;\n      }\n      const { notifyOnChangeProps } = this.options;\n      const notifyOnChangePropsValue = typeof notifyOnChangeProps === \"function\" ? notifyOnChangeProps() : notifyOnChangeProps;\n      if (notifyOnChangePropsValue === \"all\" || !notifyOnChangePropsValue && !this.#trackedProps.size) {\n        return true;\n      }\n      const includedProps = new Set(\n        notifyOnChangePropsValue ?? this.#trackedProps\n      );\n      if (this.options.throwOnError) {\n        includedProps.add(\"error\");\n      }\n      return Object.keys(this.#currentResult).some((key) => {\n        const typedKey = key;\n        const changed = this.#currentResult[typedKey] !== prevResult[typedKey];\n        return changed && includedProps.has(typedKey);\n      });\n    };\n    if (notifyOptions?.listeners !== false && shouldNotifyListeners()) {\n      defaultNotifyOptions.listeners = true;\n    }\n    this.#notify({ ...defaultNotifyOptions, ...notifyOptions });\n  }\n  #updateQuery() {\n    const query = this.#client.getQueryCache().build(this.#client, this.options);\n    if (query === this.#currentQuery) {\n      return;\n    }\n    const prevQuery = this.#currentQuery;\n    this.#currentQuery = query;\n    this.#currentQueryInitialState = query.state;\n    if (this.hasListeners()) {\n      prevQuery?.removeObserver(this);\n      query.addObserver(this);\n    }\n  }\n  onQueryUpdate() {\n    this.updateResult();\n    if (this.hasListeners()) {\n      this.#updateTimers();\n    }\n  }\n  #notify(notifyOptions) {\n    notifyManager.batch(() => {\n      if (notifyOptions.listeners) {\n        this.listeners.forEach((listener) => {\n          listener(this.#currentResult);\n        });\n      }\n      this.#client.getQueryCache().notify({\n        query: this.#currentQuery,\n        type: \"observerResultsUpdated\"\n      });\n    });\n  }\n};\nfunction shouldLoadOnMount(query, options) {\n  return resolveEnabled(options.enabled, query) !== false && query.state.data === void 0 && !(query.state.status === \"error\" && options.retryOnMount === false);\n}\nfunction shouldFetchOnMount(query, options) {\n  return shouldLoadOnMount(query, options) || query.state.data !== void 0 && shouldFetchOn(query, options, options.refetchOnMount);\n}\nfunction shouldFetchOn(query, options, field) {\n  if (resolveEnabled(options.enabled, query) !== false) {\n    const value = typeof field === \"function\" ? field(query) : field;\n    return value === \"always\" || value !== false && isStale(query, options);\n  }\n  return false;\n}\nfunction shouldFetchOptionally(query, prevQuery, options, prevOptions) {\n  return (query !== prevQuery || resolveEnabled(prevOptions.enabled, query) === false) && (!options.suspense || query.state.status !== \"error\") && isStale(query, options);\n}\nfunction isStale(query, options) {\n  return resolveEnabled(options.enabled, query) !== false && query.isStaleByTime(resolveStaleTime(options.staleTime, query));\n}\nfunction shouldAssignObserverCurrentProperties(observer, optimisticResult) {\n  if (!shallowEqualObjects(observer.getCurrentResult(), optimisticResult)) {\n    return true;\n  }\n  return false;\n}\nexport {\n  QueryObserver\n};\n//# sourceMappingURL=queryObserver.js.map","\"use client\";\n\n// src/QueryClientProvider.tsx\nimport * as React from \"react\";\nimport { jsx } from \"react/jsx-runtime\";\nvar QueryClientContext = React.createContext(\n  void 0\n);\nvar useQueryClient = (queryClient) => {\n  const client = React.useContext(QueryClientContext);\n  if (queryClient) {\n    return queryClient;\n  }\n  if (!client) {\n    throw new Error(\"No QueryClient set, use QueryClientProvider to set one\");\n  }\n  return client;\n};\nvar QueryClientProvider = ({\n  client,\n  children\n}) => {\n  React.useEffect(() => {\n    client.mount();\n    return () => {\n      client.unmount();\n    };\n  }, [client]);\n  return /* @__PURE__ */ jsx(QueryClientContext.Provider, { value: client, children });\n};\nexport {\n  QueryClientContext,\n  QueryClientProvider,\n  useQueryClient\n};\n//# sourceMappingURL=QueryClientProvider.js.map","\"use client\";\n\n// src/isRestoring.ts\nimport * as React from \"react\";\nvar IsRestoringContext = React.createContext(false);\nvar useIsRestoring = () => React.useContext(IsRestoringContext);\nvar IsRestoringProvider = IsRestoringContext.Provider;\nexport {\n  IsRestoringProvider,\n  useIsRestoring\n};\n//# sourceMappingURL=isRestoring.js.map","\"use client\";\n\n// src/QueryErrorResetBoundary.tsx\nimport * as React from \"react\";\nimport { jsx } from \"react/jsx-runtime\";\nfunction createValue() {\n  let isReset = false;\n  return {\n    clearReset: () => {\n      isReset = false;\n    },\n    reset: () => {\n      isReset = true;\n    },\n    isReset: () => {\n      return isReset;\n    }\n  };\n}\nvar QueryErrorResetBoundaryContext = React.createContext(createValue());\nvar useQueryErrorResetBoundary = () => React.useContext(QueryErrorResetBoundaryContext);\nvar QueryErrorResetBoundary = ({\n  children\n}) => {\n  const [value] = React.useState(() => createValue());\n  return /* @__PURE__ */ jsx(QueryErrorResetBoundaryContext.Provider, { value, children: typeof children === \"function\" ? children(value) : children });\n};\nexport {\n  QueryErrorResetBoundary,\n  useQueryErrorResetBoundary\n};\n//# sourceMappingURL=QueryErrorResetBoundary.js.map","// src/utils.ts\nfunction shouldThrowError(throwError, params) {\n  if (typeof throwError === \"function\") {\n    return throwError(...params);\n  }\n  return !!throwError;\n}\nfunction noop() {\n}\nexport {\n  noop,\n  shouldThrowError\n};\n//# sourceMappingURL=utils.js.map","\"use client\";\n\n// src/errorBoundaryUtils.ts\nimport * as React from \"react\";\nimport { shouldThrowError } from \"./utils.js\";\nvar ensurePreventErrorBoundaryRetry = (options, errorResetBoundary) => {\n  if (options.suspense || options.throwOnError || options.experimental_prefetchInRender) {\n    if (!errorResetBoundary.isReset()) {\n      options.retryOnMount = false;\n    }\n  }\n};\nvar useClearResetErrorBoundary = (errorResetBoundary) => {\n  React.useEffect(() => {\n    errorResetBoundary.clearReset();\n  }, [errorResetBoundary]);\n};\nvar getHasError = ({\n  result,\n  errorResetBoundary,\n  throwOnError,\n  query\n}) => {\n  return result.isError && !errorResetBoundary.isReset() && !result.isFetching && query && shouldThrowError(throwOnError, [result.error, query]);\n};\nexport {\n  ensurePreventErrorBoundaryRetry,\n  getHasError,\n  useClearResetErrorBoundary\n};\n//# sourceMappingURL=errorBoundaryUtils.js.map","// src/suspense.ts\nvar defaultThrowOnError = (_error, query) => query.state.data === void 0;\nvar ensureSuspenseTimers = (defaultedOptions) => {\n  const originalStaleTime = defaultedOptions.staleTime;\n  if (defaultedOptions.suspense) {\n    defaultedOptions.staleTime = typeof originalStaleTime === \"function\" ? (...args) => Math.max(originalStaleTime(...args), 1e3) : Math.max(originalStaleTime ?? 1e3, 1e3);\n    if (typeof defaultedOptions.gcTime === \"number\") {\n      defaultedOptions.gcTime = Math.max(defaultedOptions.gcTime, 1e3);\n    }\n  }\n};\nvar willFetch = (result, isRestoring) => result.isLoading && result.isFetching && !isRestoring;\nvar shouldSuspend = (defaultedOptions, result) => defaultedOptions?.suspense && result.isPending;\nvar fetchOptimistic = (defaultedOptions, observer, errorResetBoundary) => observer.fetchOptimistic(defaultedOptions).catch(() => {\n  errorResetBoundary.clearReset();\n});\nexport {\n  defaultThrowOnError,\n  ensureSuspenseTimers,\n  fetchOptimistic,\n  shouldSuspend,\n  willFetch\n};\n//# sourceMappingURL=suspense.js.map","\"use client\";\n\n// src/useBaseQuery.ts\nimport * as React from \"react\";\nimport { isServer, notifyManager } from \"@tanstack/query-core\";\nimport { useQueryClient } from \"./QueryClientProvider.js\";\nimport { useQueryErrorResetBoundary } from \"./QueryErrorResetBoundary.js\";\nimport {\n  ensurePreventErrorBoundaryRetry,\n  getHasError,\n  useClearResetErrorBoundary\n} from \"./errorBoundaryUtils.js\";\nimport { useIsRestoring } from \"./isRestoring.js\";\nimport {\n  ensureSuspenseTimers,\n  fetchOptimistic,\n  shouldSuspend,\n  willFetch\n} from \"./suspense.js\";\nimport { noop } from \"./utils.js\";\nfunction useBaseQuery(options, Observer, queryClient) {\n  if (process.env.NODE_ENV !== \"production\") {\n    if (typeof options !== \"object\" || Array.isArray(options)) {\n      throw new Error(\n        'Bad argument type. Starting with v5, only the \"Object\" form is allowed when calling query related functions. Please use the error stack to find the culprit call. More info here: https://tanstack.com/query/latest/docs/react/guides/migrating-to-v5#supports-a-single-signature-one-object'\n      );\n    }\n  }\n  const client = useQueryClient(queryClient);\n  const isRestoring = useIsRestoring();\n  const errorResetBoundary = useQueryErrorResetBoundary();\n  const defaultedOptions = client.defaultQueryOptions(options);\n  client.getDefaultOptions().queries?._experimental_beforeQuery?.(\n    defaultedOptions\n  );\n  defaultedOptions._optimisticResults = isRestoring ? \"isRestoring\" : \"optimistic\";\n  ensureSuspenseTimers(defaultedOptions);\n  ensurePreventErrorBoundaryRetry(defaultedOptions, errorResetBoundary);\n  useClearResetErrorBoundary(errorResetBoundary);\n  const isNewCacheEntry = !client.getQueryCache().get(defaultedOptions.queryHash);\n  const [observer] = React.useState(\n    () => new Observer(\n      client,\n      defaultedOptions\n    )\n  );\n  const result = observer.getOptimisticResult(defaultedOptions);\n  const shouldSubscribe = !isRestoring && options.subscribed !== false;\n  React.useSyncExternalStore(\n    React.useCallback(\n      (onStoreChange) => {\n        const unsubscribe = shouldSubscribe ? observer.subscribe(notifyManager.batchCalls(onStoreChange)) : noop;\n        observer.updateResult();\n        return unsubscribe;\n      },\n      [observer, shouldSubscribe]\n    ),\n    () => observer.getCurrentResult(),\n    () => observer.getCurrentResult()\n  );\n  React.useEffect(() => {\n    observer.setOptions(defaultedOptions, { listeners: false });\n  }, [defaultedOptions, observer]);\n  if (shouldSuspend(defaultedOptions, result)) {\n    throw fetchOptimistic(defaultedOptions, observer, errorResetBoundary);\n  }\n  if (getHasError({\n    result,\n    errorResetBoundary,\n    throwOnError: defaultedOptions.throwOnError,\n    query: client.getQueryCache().get(defaultedOptions.queryHash)\n  })) {\n    throw result.error;\n  }\n  ;\n  client.getDefaultOptions().queries?._experimental_afterQuery?.(\n    defaultedOptions,\n    result\n  );\n  if (defaultedOptions.experimental_prefetchInRender && !isServer && willFetch(result, isRestoring)) {\n    const promise = isNewCacheEntry ? (\n      // Fetch immediately on render in order to ensure `.promise` is resolved even if the component is unmounted\n      fetchOptimistic(defaultedOptions, observer, errorResetBoundary)\n    ) : (\n      // subscribe to the \"cache promise\" so that we can finalize the currentThenable once data comes in\n      client.getQueryCache().get(defaultedOptions.queryHash)?.promise\n    );\n    promise?.catch(noop).finally(() => {\n      observer.updateResult();\n    });\n  }\n  return !defaultedOptions.notifyOnChangeProps ? observer.trackResult(result) : result;\n}\nexport {\n  useBaseQuery\n};\n//# sourceMappingURL=useBaseQuery.js.map","\"use client\";\n\n// src/useQuery.ts\nimport { QueryObserver } from \"@tanstack/query-core\";\nimport { useBaseQuery } from \"./useBaseQuery.js\";\nfunction useQuery(options, queryClient) {\n  return useBaseQuery(options, QueryObserver, queryClient);\n}\nexport {\n  useQuery\n};\n//# sourceMappingURL=useQuery.js.map"],"names":["Subscribable","listener","isServer","noop","isValidTimeout","value","timeUntilStale","updatedAt","staleTime","resolveStaleTime","query","resolveEnabled","enabled","hashKey","queryKey","_","val","isPlainObject","result","key","replaceEqualDeep","a","b","array","isPlainArray","aItems","aSize","bItems","bSize","copy","equalItems","i","shallowEqualObjects","o","hasObjectPrototype","ctor","prot","replaceData","prevData","data","options","FocusManager","_a","__privateAdd","_focused","_cleanup","_setup","__privateSet","onFocus","__privateGet","setup","focused","isFocused","focusManager","OnlineManager","_online","onOnline","onlineListener","offlineListener","online","onlineManager","pendingThenable","resolve","reject","thenable","_resolve","_reject","finalize","reason","canFetch","networkMode","createNotifyManager","queue","transactions","notifyFn","callback","batchNotifyFn","scheduleFn","cb","schedule","flush","originalQueue","args","fn","notifyManager","fetchState","QueryObserver","client","_QueryObserver_instances","_client","_currentQuery","_currentQueryInitialState","_currentResult","_currentResultState","_currentResultOptions","_currentThenable","_selectError","_selectFn","_selectResult","_lastQueryWithDefinedData","_staleTimeoutId","_refetchIntervalId","_currentRefetchInterval","_trackedProps","shouldFetchOnMount","__privateMethod","executeFetch_fn","updateTimers_fn","shouldFetchOn","clearStaleTimeout_fn","clearRefetchInterval_fn","notifyOptions","prevOptions","prevQuery","updateQuery_fn","mounted","shouldFetchOptionally","updateStaleTimeout_fn","nextRefetchInterval","computeRefetchInterval_fn","updateRefetchInterval_fn","shouldAssignObserverCurrentProperties","onPropTracked","trackedResult","defaultedOptions","fetchOptions","prevResult","prevResultState","prevResultOptions","queryInitialState","state","newState","isPlaceholderData","fetchOnMount","fetchOptionally","error","errorUpdatedAt","status","selectError","placeholderData","isFetching","isPending","isError","isLoading","hasData","nextResult","isStale","finalizeThenableIfPossible","recreateThenable","pending","prevThenable","defaultNotifyOptions","shouldNotifyListeners","notifyOnChangeProps","notifyOnChangePropsValue","includedProps","typedKey","notify_fn","promise","timeout","nextInterval","shouldLoadOnMount","field","observer","optimisticResult","QueryClientContext","React.createContext","useQueryClient","queryClient","React.useContext","IsRestoringContext","useIsRestoring","createValue","isReset","QueryErrorResetBoundaryContext","useQueryErrorResetBoundary","shouldThrowError","throwError","params","ensurePreventErrorBoundaryRetry","errorResetBoundary","useClearResetErrorBoundary","React.useEffect","getHasError","throwOnError","ensureSuspenseTimers","originalStaleTime","willFetch","isRestoring","shouldSuspend","fetchOptimistic","useBaseQuery","Observer","_b","isNewCacheEntry","React.useState","shouldSubscribe","React.useSyncExternalStore","React.useCallback","onStoreChange","unsubscribe","_d","_c","_e","useQuery"],"mappings":"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","x_google_ignoreList":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16]}