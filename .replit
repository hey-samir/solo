modules = ["python-3.11", "postgresql-16", "nodejs-20"]

[nix]
channel = "stable-24_05"

[deployment]
deploymentTarget = "cloudrun"
run = ["sh", "-c", "NODE_ENV=production npx vite build && node src/server/server.js"]

[workflows]
runButton = "Project"

[[workflows.workflow]]
name = "Database Migrations"
author = "agent"

[workflows.workflow.metadata]
agentRequireRestartOnSave = false

[[workflows.workflow.tasks]]
task = "packager.installForAll"

[[workflows.workflow.tasks]]
task = "shell.exec"
args = """

    set -e
    echo \"Initializing database migrations...\"
    
    # Create migration directories
    mkdir -p drizzle/migrations
    mkdir -p migrations/meta
    
    # Initialize meta journal
    echo '{
      \"version\": \"5\",
      \"dialect\": \"pg\",
      \"entries\": []
    }' > drizzle/migrations/meta/_journal.json
    
    # Run migrations
    npx drizzle-kit generate:pg
    NODE_ENV=production tsx src/server/db/migrate.ts
    """

[[workflows.workflow]]
name = "Build"
author = "agent"

[workflows.workflow.metadata]
agentRequireRestartOnSave = false

[[workflows.workflow.tasks]]
task = "packager.installForAll"

[[workflows.workflow.tasks]]
task = "shell.exec"
args = """

    set -e
    echo \"Starting build process...\"
    # Clean build directories
    rm -rf dist/client
    mkdir -p dist/client
    # Build frontend
    NODE_ENV=production npx vite build
    echo \"Build completed successfully\"
    """

[[workflows.workflow]]
name = "Project"
author = "agent"
mode = "parallel"

[workflows.workflow.metadata]
agentRequireRestartOnSave = false

[[workflows.workflow.tasks]]
task = "packager.installForAll"

[[workflows.workflow.tasks]]
task = "workflow.run"
args = "Seed Test Data"

[[workflows.workflow.tasks]]
task = "workflow.run"
args = "Database Migrations"

[[workflows.workflow.tasks]]
task = "workflow.run"
args = "Build"

[[workflows.workflow.tasks]]
task = "workflow.run"
args = "Production"

[[workflows.workflow.tasks]]
task = "workflow.run"
args = "Staging"

[[workflows.workflow]]
name = "Seed Test Data"
author = "agent"

[workflows.workflow.metadata]
agentRequireRestartOnSave = false

[[workflows.workflow.tasks]]
task = "packager.installForAll"

[[workflows.workflow.tasks]]
task = "shell.exec"
args = "NODE_ENV=development tsx src/server/db/seed.ts"

[[workflows.workflow]]
name = "Production"
author = "agent"

[workflows.workflow.metadata]
agentRequireRestartOnSave = false

[[workflows.workflow.tasks]]
task = "packager.installForAll"

[[workflows.workflow.tasks]]
task = "shell.exec"
args = """

    set -e
    echo \"Starting fresh production deployment at $(date)\"
    
    # Clean build
    rm -rf dist/client/production
    mkdir -p dist/client/production
    
    # First ensure public directory exists and copy logo
    mkdir -p public/images
    cp -f attached_assets/solo-clear.png public/images/
    
    # Clean and rebuild
    NODE_ENV=production npx vite build
    
    # Start server with debug logging
    NODE_ENV=production DEBUG=express:* PORT=3000 node_modules/.bin/tsx src/server/server.ts
    """
waitForPort = 3000

[[workflows.workflow]]
name = "Staging"
author = "agent"

[workflows.workflow.metadata]
agentRequireRestartOnSave = false

[[workflows.workflow.tasks]]
task = "packager.installForAll"

[[workflows.workflow.tasks]]
task = "shell.exec"
args = """

    set -e
    echo \"Starting fresh staging deployment at $(date)\"
    
    # Clean and prepare build directory
    rm -rf dist/client/staging
    mkdir -p dist/client/staging
    
    # Copy index.html to staging directory
    cp index.html dist/client/staging/
    
    # Build frontend with staging mode
    NODE_ENV=staging npx vite build --mode staging
    
    # Start server
    NODE_ENV=staging PORT=5000 tsx src/server/server.ts
    """
waitForPort = 5000

[[ports]]
localPort = 80
externalPort = 3000

[[ports]]
localPort = 3000
externalPort = 80

[[ports]]
localPort = 3001
externalPort = 3001

[[ports]]
localPort = 3002
externalPort = 3002

[[ports]]
localPort = 3003
externalPort = 3003

[[ports]]
localPort = 5000
externalPort = 5000

[[ports]]
localPort = 5001

[[ports]]
localPort = 5002
externalPort = 4200

[auth]
pageEnabled = false
buttonEnabled = false
