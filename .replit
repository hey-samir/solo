modules = ["python-3.11", "postgresql-16", "nodejs-20"]

[nix]
channel = "stable-24_05"

[deployment]
deploymentTarget = "cloudrun"
run = ["sh", "-c", "NODE_ENV=production npx vite build && node src/server/server.js"]

[workflows]
runButton = "Project"

[[workflows.workflow]]
name = "Database Migrations"
author = "agent"

[workflows.workflow.metadata]
agentRequireRestartOnSave = false

[[workflows.workflow.tasks]]
task = "packager.installForAll"

[[workflows.workflow.tasks]]
task = "shell.exec"
args = """

    set -e
    echo \"Initializing database migrations...\"
    
    # Create migration directories
    mkdir -p drizzle/migrations
    mkdir -p migrations/meta
    
    # Initialize meta journal
    echo '{
      \"version\": \"5\",
      \"dialect\": \"pg\",
      \"entries\": []
    }' > drizzle/migrations/meta/_journal.json
    
    # Run migrations
    npx drizzle-kit generate:pg
    NODE_ENV=production tsx src/server/db/migrate.ts
    """

[[workflows.workflow]]
name = "Build"
author = "agent"

[workflows.workflow.metadata]
agentRequireRestartOnSave = false

[[workflows.workflow.tasks]]
task = "packager.installForAll"

[[workflows.workflow.tasks]]
task = "shell.exec"
args = """
#!/bin/bash
set -e

echo \"Starting build process...\"

# Clean build directories
rm -rf dist/client
mkdir -p dist/client/{staging,production}

# Copy production.html for staging and production
cp src/production.html index.html

# Build for production
echo \"Building production...\"
NODE_ENV=production npx vite build --mode production --outDir dist/client/production

# Build for staging
echo \"Building staging...\"
NODE_ENV=staging npx vite build --mode staging --outDir dist/client/staging

# Verify build output
echo \"Verifying build output...\"
if [ ! -f \"dist/client/production/index.html\" ]; then
    echo \"Error: Production build failed - index.html not found\"
    exit 1
fi

if [ ! -f \"dist/client/staging/index.html\" ]; then
    echo \"Error: Staging build failed - index.html not found\"
    exit 1
fi

echo \"Build completed successfully\"
ls -la dist/client/production
ls -la dist/client/staging"""

[[workflows.workflow]]
name = "Project"
author = "agent"
mode = "parallel"

[workflows.workflow.metadata]
agentRequireRestartOnSave = false

[[workflows.workflow.tasks]]
task = "packager.installForAll"

[[workflows.workflow.tasks]]
task = "workflow.run"
args = "Seed Test Data"

[[workflows.workflow.tasks]]
task = "workflow.run"
args = "Database Migrations"

[[workflows.workflow.tasks]]
task = "workflow.run"
args = "Build"

[[workflows.workflow.tasks]]
task = "workflow.run"
args = "Production"

[[workflows.workflow.tasks]]
task = "workflow.run"
args = "Staging"

[[workflows.workflow]]
name = "Seed Test Data"
author = "agent"

[workflows.workflow.metadata]
agentRequireRestartOnSave = false

[[workflows.workflow.tasks]]
task = "packager.installForAll"

[[workflows.workflow.tasks]]
task = "shell.exec"
args = "NODE_ENV=development tsx src/server/db/seed.ts"

[[workflows.workflow]]
name = "Production"
author = "agent"

[workflows.workflow.metadata]
agentRequireRestartOnSave = false

[[workflows.workflow.tasks]]
task = "packager.installForAll"

[[workflows.workflow.tasks]]
task = "shell.exec"
args = """
#!/bin/bash
set -e

# Start production server
echo \"Starting production server...\"
NODE_ENV=production PORT=3000 tsx src/server/server.ts
"""
waitForPort = 3000

[[workflows.workflow]]
name = "Staging"
author = "agent"

[workflows.workflow.metadata]
agentRequireRestartOnSave = false

[[workflows.workflow.tasks]]
task = "packager.installForAll"

[[workflows.workflow.tasks]]
task = "shell.exec"
args = """
#!/bin/bash
set -e

# Start backend server
echo \"Starting staging backend server...\"
NODE_ENV=staging PORT=5001 tsx src/server/server.ts &
SERVER_PID=$!

# Start frontend
echo \"Starting frontend dev server...\"
NODE_ENV=staging npx vite --host 0.0.0.0 --port 5000 --mode staging &
VITE_PID=$!

# Wait for both processes
wait $SERVER_PID $VITE_PID
"""
waitForPort = 5000

[[ports]]
localPort = 80
externalPort = 3000

[[ports]]
localPort = 3000
externalPort = 80

[[ports]]
localPort = 3001
externalPort = 3001

[[ports]]
localPort = 3002
externalPort = 3002

[[ports]]
localPort = 3003
externalPort = 3003

[[ports]]
localPort = 5000
externalPort = 5000

[[ports]]
localPort = 5001

[[ports]]
localPort = 5002
externalPort = 4200

[auth]
pageEnabled = false
buttonEnabled = false
