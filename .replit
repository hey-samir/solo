modules = ["python-3.11", "postgresql-16", "nodejs-20"]

[nix]
channel = "stable-24_05"

[deployment]
deploymentTarget = "cloudrun"
run = ["sh", "-c", "NODE_ENV=production npx vite build && node src/server/server.js"]

[workflows]
runButton = "Project"

[[workflows.workflow]]
name = "Database Migrations"
author = "agent"

[workflows.workflow.metadata]
agentRequireRestartOnSave = false

[[workflows.workflow.tasks]]
task = "packager.installForAll"

[[workflows.workflow.tasks]]
task = "shell.exec"
args = "npx drizzle-kit generate:pg && tsx src/server/db/migrate.ts"

[[workflows.workflow]]
name = "Build"
author = "agent"

[workflows.workflow.metadata]
agentRequireRestartOnSave = false

[[workflows.workflow.tasks]]
task = "packager.installForAll"

[[workflows.workflow.tasks]]
task = "shell.exec"
args = """

set -e

echo \"Starting build process...\"

# Clean and prepare directories
rm -rf dist
mkdir -p dist/server

# Install dependencies if needed
npm install

# Compile server TypeScript
echo \"Compiling server files...\"
NODE_ENV=production npx tsc --project tsconfig.server.json

# Build client
echo \"Building client...\"
NODE_ENV=production npx vite build

# Copy necessary files with error checking
echo \"Copying server files...\"
for dir in routes middleware db types deployment; do
    if [ -d \"src/server/$dir\" ]; then
        echo \"Copying $dir...\"
        cp -r \"src/server/$dir\" \"dist/server/\" || {
            echo \"Failed to copy $dir\"
            exit 1
        }
    fi
done

# Verify build artifacts
if [ ! -f \"dist/server/server.js\" ]; then
    echo \"Error: server.js not found after build\"
    ls -la dist/server/
    exit 1
fi

if [ ! -f \"dist/index.html\" ]; then
    echo \"Error: index.html not found after client build\"
    ls -la dist/
    exit 1
fi

echo \"Build completed successfully. Contents of dist/server:\"
ls -la dist/server/
"""

[[workflows.workflow]]
name = "Project"
author = "agent"
mode = "parallel"

[workflows.workflow.metadata]
agentRequireRestartOnSave = false

[[workflows.workflow.tasks]]
task = "packager.installForAll"

[[workflows.workflow.tasks]]
task = "workflow.run"
args = "Seed Test Data"

[[workflows.workflow.tasks]]
task = "workflow.run"
args = "Database Migrations"

[[workflows.workflow.tasks]]
task = "workflow.run"
args = "Build"

[[workflows.workflow.tasks]]
task = "workflow.run"
args = "Staging Server"

[[workflows.workflow.tasks]]
task = "workflow.run"
args = "Production Server"

[[workflows.workflow.tasks]]
task = "workflow.run"
args = "Build Server"

[[workflows.workflow.tasks]]
task = "workflow.run"
args = "Full Production Deploy"

[[workflows.workflow.tasks]]
task = "workflow.run"
args = "Blue-Green Deploy"

[[workflows.workflow.tasks]]
task = "workflow.run"
args = "Development Server"

[[workflows.workflow.tasks]]
task = "workflow.run"
args = "Production Deploy"

[[workflows.workflow.tasks]]
task = "workflow.run"
args = "TypeScript Build Check"

[[workflows.workflow.tasks]]
task = "workflow.run"
args = "TypeScript Check"

[[workflows.workflow.tasks]]
task = "workflow.run"
args = "Start Production Server"

[[workflows.workflow]]
name = "Seed Test Data"
author = "agent"

[workflows.workflow.metadata]
agentRequireRestartOnSave = false

[[workflows.workflow.tasks]]
task = "packager.installForAll"

[[workflows.workflow.tasks]]
task = "shell.exec"
args = "NODE_ENV=development tsx src/server/db/seed.ts"

[[workflows.workflow]]
name = "Staging Server"
author = "agent"

[workflows.workflow.metadata]
agentRequireRestartOnSave = false

[[workflows.workflow.tasks]]
task = "packager.installForAll"

[[workflows.workflow.tasks]]
task = "shell.exec"
args = "NODE_ENV=staging PORT=5000 tsx src/server/server.ts"
waitForPort = 5000

[[workflows.workflow]]
name = "Production Server"
author = "agent"

[workflows.workflow.metadata]
agentRequireRestartOnSave = false

[[workflows.workflow.tasks]]
task = "packager.installForAll"

[[workflows.workflow.tasks]]
task = "shell.exec"
args = """

set -e

echo \"Starting production server...\"

# Set environment variables
export NODE_ENV=production
export PORT=80
export HOST=0.0.0.0

# Install dependencies if needed
npm install

# Verify build exists
if [ ! -f \"dist/server/server.js\" ]; then
    echo \"Build artifacts missing, running build workflow first...\"
    npm run workflow Build
fi

# Add verbose logging for debugging
echo \"Current directory: $(pwd)\"
echo \"Server file exists: $(test -f dist/server/server.js && echo 'Yes' || echo 'No')\"
echo \"Contents of dist/server:\"
ls -la dist/server/

# Start the server with enhanced error reporting
cd dist/server
echo \"Starting server from $(pwd) on port ${PORT}\"
NODE_OPTIONS='--trace-warnings --trace-uncaught' node -r source-map-support/register server.js
"""
waitForPort = 80

[[workflows.workflow]]
name = "Build Server"
author = "agent"

[workflows.workflow.metadata]
agentRequireRestartOnSave = false

[[workflows.workflow.tasks]]
task = "packager.installForAll"

[[workflows.workflow.tasks]]
task = "shell.exec"
args = "npx tsc --project tsconfig.server.json && cp -r src/server/routes dist/server/ && cp -r src/server/middleware dist/server/"

[[workflows.workflow]]
name = "Full Production Deploy"
author = "agent"

[workflows.workflow.metadata]
agentRequireRestartOnSave = false

[[workflows.workflow.tasks]]
task = "packager.installForAll"

[[workflows.workflow.tasks]]
task = "shell.exec"
args = """

set -e

# Build both client and server
NODE_ENV=production npx vite build
NODE_ENV=production npx tsc --project tsconfig.server.json

# Copy necessary files
cp -r src/server/routes src/server/middleware src/server/db src/server/types src/server/deployment dist/server/

# Start the server
cd dist/server && NODE_ENV=production PORT=80 node server.js
"""
waitForPort = 80

[[workflows.workflow]]
name = "Blue-Green Deploy"
author = "agent"

[workflows.workflow.metadata]
agentRequireRestartOnSave = false

[[workflows.workflow.tasks]]
task = "packager.installForAll"

[[workflows.workflow.tasks]]
task = "shell.exec"
args = "NODE_ENV=production tsx src/server/deployment/deploy.ts"
waitForPort = 5002

[[workflows.workflow]]
name = "Development Server"
author = "agent"

[workflows.workflow.metadata]
agentRequireRestartOnSave = false

[[workflows.workflow.tasks]]
task = "packager.installForAll"

[[workflows.workflow.tasks]]
task = "shell.exec"
args = "NODE_ENV=development npx concurrently \"npx vite --port 3000\" \"PORT=3003 tsx src/server/server.ts\""
waitForPort = 3000

[[workflows.workflow]]
name = "Production Deploy"
author = "agent"

[workflows.workflow.metadata]
agentRequireRestartOnSave = false

[[workflows.workflow.tasks]]
task = "packager.installForAll"

[[workflows.workflow.tasks]]
task = "shell.exec"
args = """

set -e

echo \"Starting production deployment...\"

# Verify build artifacts and rebuild if needed
echo \"Verifying build...\"
if [ ! -f \"dist/server/server.js\" ] || [ ! -f \"dist/index.html\" ]; then
    echo \"Build artifacts missing, running build first...\"
    npm run build
fi

# Prepare environment
echo \"Setting up environment...\"
export NODE_ENV=production
export PORT=80

# Start server with debugging information
echo \"Starting server...\"
cd dist/server || {
    echo \"Failed to find server directory. Current structure:\"
    pwd
    ls -R ../
    exit 1
}

# Start the server with detailed error reporting
node -r source-map-support/register server.js || {
    echo \"Server failed to start. Debug info:\"
    echo \"Current directory: $(pwd)\"
    echo \"Environment: $NODE_ENV\"
    echo \"Port: $PORT\"
    echo \"Available files:\"
    ls -la
    echo \"Server.js exists: $(test -f server.js && echo 'Yes' || echo 'No')\"
    exit 1
}
"""
waitForPort = 80

[[workflows.workflow]]
name = "TypeScript Build Check"
author = "agent"

[workflows.workflow.metadata]
agentRequireRestartOnSave = false

[[workflows.workflow.tasks]]
task = "packager.installForAll"

[[workflows.workflow.tasks]]
task = "shell.exec"
args = "npx tsc --project tsconfig.server.json --noEmit"

[[workflows.workflow]]
name = "TypeScript Check"
author = "agent"

[workflows.workflow.metadata]
agentRequireRestartOnSave = false

[[workflows.workflow.tasks]]
task = "packager.installForAll"

[[workflows.workflow.tasks]]
task = "shell.exec"
args = "npx tsc --project tsconfig.server.json --noEmit --verbose"

[[workflows.workflow]]
name = "Start Production Server"
author = "agent"

[workflows.workflow.metadata]
agentRequireRestartOnSave = false

[[workflows.workflow.tasks]]
task = "packager.installForAll"

[[workflows.workflow.tasks]]
task = "shell.exec"
args = """

set -e

echo \"Starting production server...\"

# Set environment variables
export NODE_ENV=production
export PORT=80
export HOST=0.0.0.0

# Run build if server.js doesn't exist
if [ ! -f \"dist/server/server.js\" ]; then
    echo \"Server file missing, running build workflow first...\"
    npm run workflow Build
fi

# Start the server
cd dist/server
echo \"Starting server from $(pwd) on port ${PORT}\"
node server.js
"""
waitForPort = 80

[[ports]]
localPort = 80
externalPort = 3000

[[ports]]
localPort = 3000
externalPort = 80

[[ports]]
localPort = 3001
externalPort = 3001

[[ports]]
localPort = 3002
externalPort = 3002

[[ports]]
localPort = 3003
externalPort = 3003

[[ports]]
localPort = 5000
externalPort = 5000

[[ports]]
localPort = 5001

[[ports]]
localPort = 5002
externalPort = 4200

[auth]
pageEnabled = false
buttonEnabled = false
